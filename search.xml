<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AD的操作</title>
    <url>/2022/09/21/AD%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="第一节课"><a href="#第一节课" class="headerlink" title="第一节课"></a>第一节课</h2><h3 id="pcb的概述"><a href="#pcb的概述" class="headerlink" title="pcb的概述"></a>pcb的概述</h3><p>中文全称，印刷电路板</p>
<p>根据材料的软硬特性可以分为干性板和柔性板，还有干柔结合板</p>
<p>根据电路板上的信号传输速率可以分为低速板和高速板，低速板（小于200M），高速板（大于200M）</p>
<p>在高频通信电路中，需要考虑很多低速板中不需要考虑的问题，比如电磁干扰等，目前自己所知的一个原因是电路原理中所学到的纯阻性或者纯容性以及纯感性的物质在自然界基本上不存在</p>
<p>另外对于几层板的区分，主要是通过一个板子中可以通电的有几层。可以通过板层中的材质是铜的个数</p>
<h3 id="AD操作"><a href="#AD操作" class="headerlink" title="AD操作"></a>AD操作</h3><ul>
<li>model的显示</li>
</ul>
<h2 id="第二节课"><a href="#第二节课" class="headerlink" title="第二节课"></a>第二节课</h2><h3 id="工程设置"><a href="#工程设置" class="headerlink" title="工程设置"></a>工程设置</h3><p>工程重命名 <strong>可支持中文</strong>*<br>原理图纸设置  </p>
<ul>
<li>图的大小      standard(标准)  A4</li>
<li>工程标题栏    设置</li>
</ul>
<h3 id="AD面板"><a href="#AD面板" class="headerlink" title="AD面板"></a>AD面板</h3><ul>
<li><p>pannel 开关面板</p>
</li>
<li><p>库面板<br>  好用的操作 查找元件</p>
</li>
<li><p>过滤器<br>  过滤text</p>
</li>
</ul>
<p>100mil&#x3D;2.54mm   </p>
<ul>
<li>栅格范围 100mil 捕获栅格 40mil</li>
</ul>
<h3 id="原理图设置"><a href="#原理图设置" class="headerlink" title="原理图设置"></a>原理图设置</h3><p>快捷键操作</p>
<ul>
<li>左右翻转    X</li>
<li>上下翻转    Y</li>
<li>90°翻转    空格</li>
</ul>
<p>批量化操作</p>
<ul>
<li>批量修改位号(已学习)  </li>
<li>查找相似对象（未学习）</li>
</ul>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul>
<li>原理图设置<br>cross over</li>
</ul>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>第二节课</p>
<ul>
<li>网络标号以及网络属性</li>
<li>画图的美观性(在探索)</li>
</ul>
<p>第三节课</p>
<ul>
<li>本质的是焊盘 及其布局 和 走线</li>
</ul>
<h2 id="第三节课"><a href="#第三节课" class="headerlink" title="第三节课"></a>第三节课</h2><h3 id="原理图方向的操作"><a href="#原理图方向的操作" class="headerlink" title="原理图方向的操作"></a>原理图方向的操作</h3><ul>
<li><p>同种规格的三种模式  L M N</p>
</li>
<li><p>天线  通过过孔相连接</p>
</li>
<li><p>元件的英文名称</p>
<blockquote>
<p>fuse 电感<br>designator  位号 要全图唯一</p>
</blockquote>
</li>
<li><p>原理图中元件的对齐</p>
<blockquote>
<p>ctrl + shift + 对齐方向的英文首字母<br>平均对齐需要在面板里面设置</p>
</blockquote>
</li>
<li><p>原理图中引脚连接的表示   </p>
<blockquote>
<p>导线         连接的方式</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>网络标签</p>
</blockquote>
<blockquote>
<p>端口号        用于不同的原理图之间</p>
</blockquote>
<blockquote>
<p>nc 全称:no  ERC</p>
</blockquote>
<h2 id="第四节课"><a href="#第四节课" class="headerlink" title="第四节课"></a>第四节课</h2><p>原理图的后续处理 </p>
<h3 id="BOM表"><a href="#BOM表" class="headerlink" title="BOM表"></a>BOM表</h3><blockquote>
<p>元件的描述 : 参数值  耐压值 封装</p>
</blockquote>
<blockquote>
<p>英语名词: column(列)</p>
</blockquote>
<h3 id="网络表"><a href="#网络表" class="headerlink" title="网络表"></a>网络表</h3><blockquote>
<p>有原理图的网络表  以及工程的网络表  但是一般常用的是工程的网络表  采用protel的方式导出</p>
</blockquote>
<p>编译检查</p>
<blockquote>
<p>元件的连接   元件的封装</p>
</blockquote>
<blockquote>
<p>nrc 强制通过检测</p>
</blockquote>
]]></content>
      <tags>
        <tag>嵌入式软件</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode的快捷键</title>
    <url>/2022/08/21/VScode%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>转载于CSDN博主「Shelia_」<br>版权声明：本文为CSDN博主「Shelia_」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Shelia_/article/details/116164687">https://blog.csdn.net/Shelia_/article/details/116164687</a></p>
<span id="more"></span>
<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b3c43d3711.css">
                <div id="content_views" class="markdown_views prism-atom-one-dark">
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a name="t0"></a><a id="vscode_0"></a><a href="https://so.csdn.net/so/search?q=vscode&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=vscode&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;vscode\&quot;}&quot;}" data-tit="vscode" data-pretit="vscode">vscode</a>常用快捷键</h1> 
<h1><a name="t1"></a><a id="1_2"></a>1、快速复制一行</h1> 
<blockquote> 
 <p>快捷键： shift+alt+ 下箭头/上箭头 或者 ctrl+c 然后 ctrl+v</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7012a207dec3315db43d1f345fe25a3c.gif" alt="img"></p> 
<h1><a name="t2"></a><a id="2_8"></a>2、选定多个相同的单词</h1> 
<blockquote> 
 <p>快捷键： ctrl + d</p> 
 <p>先双击选定一个单词，然后按下 ctrl + d 可以往下依次选择相同的单词。 这样同时修改相同的单词就非常方便</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1cf680f394fa1996ea2f65fb91cb12a6.gif" alt="动画11"></p> 
<h1><a name="t3"></a><a id="3_16"></a>3、全局替换某写单词</h1> 
<blockquote> 
 <p>当我们一个页面需要修改大量相同的文字的时候，我们一个的修改超级麻烦，此时我们可以使用全局替换</p> 
 <p>快捷键： ctrl + h 注意选择全部替换即可</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/debcd4cbc6bd60e7e56588f1a3e58891.gif" alt="img"></p> 
<h1><a name="t4"></a><a id="4_24"></a>4、快速定位到某一行</h1> 
<blockquote> 
 <p>当我们页面比较长的时候，上下滚动页面布方便，其实我们可以利用快捷键，快速的调到指定的行数上。</p> 
 <p>快捷键： ctrl + g</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/703494812140adc4f193f0aff69a36f9.gif" alt="img"></p> 
<h1><a name="t5"></a><a id="5_32"></a>5、放大缩小整个编辑器界面</h1> 
<blockquote> 
 <p>快捷键： ctrl + + / -</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f9b7a16bd0fa5bf5e9cb8b59fecf6ac4.gif" alt="img"></p> 
<h1><a name="t6"></a><a id="6_38"></a>6、添加多个光标</h1> 
<blockquote> 
 <p>快捷键： Ctrl + Alt + 上箭头/下箭头</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d14ba9891e5b276ae3fae8460547871e.gif" alt="img"></p> 
<h1><a name="t7"></a><a id="7_44"></a>7、选择某个区块</h1> 
<blockquote> 
 <p>可以选择一个区块进行操作</p> 
 <p>快捷键： 按住alt + shift 然后拖动鼠标</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1cc5a405d4a7124d3e23e09e4c28b156.gif" alt="img"></p> 
<blockquote> 
 <p>也可以添加多个光标</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0779a893f1373ef2127282768d120ccb.gif" alt="11"></p> 
<h1><a name="t8"></a><a id="8_56"></a>8、选中行</h1> 
<blockquote> 
 <p>快捷键： 按住alt + shift + 左箭头/ 右箭头</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1d74d0941d99ae543ab667f32ad9c93e.gif" alt="11"></p> 
<h1><a name="t9"></a><a id="9_62"></a>9、光标定位到单词首/单词尾</h1> 
<blockquote> 
 <p>快捷键 Ctrl + 左箭头/ 右箭头</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/98a16144ad3d30bda40493af0b20f41e.gif" alt="11"></p> 
<h1><a name="t10"></a><a id="10_68"></a>10、选中单词</h1> 
<blockquote> 
 <p>快捷键 Ctrl + shift + 左箭头/ 右箭头</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d154e0bdb073cc6632d256f2bbc3ade5.gif" alt="11"></p> 
<h1><a name="t11"></a><a id="11_74"></a>11、光标定位到行首/行未</h1> 
<blockquote> 
 <p>快捷键 Home/End</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/03c75dac0095eae3d716fa01160b586e.gif" alt="11"></p> 
<h1><a name="t12"></a><a id="12_80"></a>12、顶级操作</h1> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/eadba5e7ca065c34ae8d15f8d2de5d11.gif" alt="11"></p> 
<h1><a name="t13"></a><a id="13_84"></a>13、自定义快捷键</h1> 
<blockquote> 
 <p>有些快捷键，我们使用不习惯，其实我们可以自定义快捷键的。</p> 
 <p>比如js 的多行注释是 shift + alt + a ，我们想修改为 ctrl + shfit + /</p> 
 <p>设置方法： 管理按钮 — 键盘快捷方式 — 输入 shift + alt + a 找到这个快捷键 ----- 点击编辑按钮 ---- 直接按下 ctrl + shift + / ---- 最后按下回车 修改完毕。</p> 
</blockquote> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/af3877dad381c5aaa2ea9b56aa9838fb.gif" alt="img"></p> 
<p>直接按下 ctrl + shift + / ---- 最后按下回车 修改完毕。</p>
                </div><div><div></div></div>
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css" rel="stylesheet">
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css" rel="stylesheet">
        </div>]]></content>
      <categories>
        <category>综合性的IDE软件</category>
      </categories>
      <tags>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>PID算法的原理</title>
    <url>/2022/08/05/PID%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>pid算法：全称为比例积分微分控制器算法。一般工科专业的学生可能会在<strong>自动控制原理</strong>原理这门课见到它。但是大部分做竞赛的同学可能很早就会接触到它，尤其像智能车比赛、电子设计大赛（控制类）。<br>介绍一下我学习pid算法的过程，我首先学习了pid算法理论层面的公式推导，观看了b站up主DR_CAN的视频，在视频中不仅介绍了原理，还在matlab中利用stiumlation进行了仿真，遗憾的是因为准备竞赛的时间比较紧张，所以理论层面我仅仅只是了解了一个大概，后面就开始具体应用实战。<br>在具体应用中，我首先观看了野火的电机教程。因为有初步stm32开发基础，所以只观看了后面各款电机的介绍。重点是<br>    1.各款电机的类别和特点：<strong>直流有刷、直流无刷、减速电机、步进电机、伺服电机、舵机</strong><br>    2.编码器<br>    3.PID算法<br>    4.PID算法的参数整定<br>后面做的大多数事情就是其实就是找例程进行实验了，像三大巨头：<strong>野火、正点原子、普中</strong>，在我的代码的注释中，你都能找到他们的影子…<br>补充：因为野火的程序比较难移植（主要它的程序和硬件相关性比较大，且使用hal库进行编程），所以野火只是看了它的视频教程，后面的代码大部分是正点原子的，上位机使用的是<strong>匿名上位机</strong></p>
<span id="more"></span>
<p>推荐书籍：<br>up主 DR_CAN的新书：<br><img src="https://pic.imgdb.cn/item/62ee1ed18c61dc3b8e70712e.jpg" alt="推荐书籍"></p>
<hr>
<p><em>本篇文章主要是讲述pid的原理及具体工程应用中的pid分类</em></p>
<hr>
<p>1.pid的原理框图</p>
<p><img src="https://cdn.mathpix.com/snip/images/UY4fm0XUhLFzKbcsbtFk0r4IkLpO2fvxBjM-5jA-SyM.original.fullsize.png" alt="pid的原理框图"></p>
<p>pid控制属于一种闭环控制，会有反馈量返回，来进行下个时刻输出量的调整</p>
<p>举例来说，对于一个电动小车，假如它是开环的，没有左右测速的反馈量输入，我们在控制小车走直线，这个简单的任务也是比较困难的。因为生产工艺的原因，小车的左右两个轮子的在相同占空比的作用下，输出的转速也有可能不同。假如没有pid等闭环控制，我们只能通过测试调参，给左右两个轮子不同的占空比，来让左右两个轮子输出速度相同。</p>
<p>但是有了pid之后，我们轻易的完成这个任务（前提pid的参数调试的足够合理）。</p>
<p>2.pid的公式推导</p>
<ul>
<li><p>pid的时域表达式<br><img src="https://cdn.mathpix.com/snip/images/YLgsbSFld7o7ITF20WC7EBOltQA-Dxa0wu7CoiEkfJg.original.fullsize.png" alt="pid的时域表达式"></p>
<pre><code>  u(t)------输出量

  Kp-------比例系数

  e(t)------误差

  Tt--------积分时间常数

  TD-------微分时间常数
</code></pre>
</li>
<li><p>pid的频域表达式<br><img src="https://cdn.mathpix.com/snip/images/yEJJNu1oGwZsevGBW75nRe9ttEPfcqfYzBhK19qkGXo.original.fullsize.png" alt="pid的频域表达式"></p>
</li>
</ul>
<p>3.pid各个参数的功能</p>
<p><strong>比例调节</strong>：只要产生误差，立马会对误差进行调整，误差大小与输出量成正比（U&#x3D;Kp*e(t)），比例系数Kp越大，调节速度越快但容易产生震荡,越小不容易产生震荡但是调节速度会降低。但是比例调节会产生静态误差，举个例子：往一个水池里面注水，目标是维持水位高度为H，在离H较远时，增大注水速率，离H近时便减小注水速率，这便是比例调节，在离H很近时，由于误差存在，会继续往里面注水直到到达H，但是比例系数不是无穷大，输入量（注水速率）不可能发生突变，也就是说水位到H时注水速率并不为0，也就会超过水位H，超出的部分就是静态误差。</p>
<p><strong>积分调节</strong>：用于消除静态误差，增大系统的无差度，通过对误差积分可以得到一段时间内误差的大小，从而对输入量进行调整，只要偏差存在，积分调节便会一直起作用。积分时间常数Tt越大，调节速率越慢，反之会越快，但是容易引起超调甚至震荡。</p>
<p><strong>微分调节</strong>：对误差的趋势进行预测，提前对输出量做出预判性调整。就是误差对时间求导数，可以得到误差的变化趋势，有利于减小超调，克服震荡，提高系统响应速率。但是容易产生高频噪声，在干扰信号严重的系统中不适宜加入微分调节。</p>
<p>3.总结</p>
<p>pid控制兼具比例微分控制与比例积分控制的优点，直观的控制方法。</p>
<p>由于作者还未学习自动控制原理，可能公式推导以及matlab仿真的功能要留到学习完自控进行。</p>
<p>具体的pid参数整定以及pid控制的工程应用会在下一篇文章《pid的工程应用》描述</p>
]]></content>
      <tags>
        <tag>控制类算法</tag>
      </tags>
  </entry>
  <entry>
    <title>format函数的用法</title>
    <url>/2022/09/25/format%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b3c43d3711.css">
                <div id="content_views" class="htmledit_views">
                    <p>format 基本语法是通过 {} 和 : 来代替以前的 % 。</p> 
<p>format 函数可以接受不限个参数，位置可以不按顺序。</p> 
<p>format基本用法</p> 
<span id="more"></span>
<pre data-index="0"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"Hello&nbsp;&#123;0&#125;&nbsp;&#123;1&#125;".format("Chen","xin")&nbsp;#&nbsp;引用第一个参数</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'Hello&nbsp;Chen&nbsp;xin'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"&#123;&#125;&nbsp;is&nbsp;cute".format("Chen&nbsp;xin")&nbsp;#&nbsp;引用第一个参数</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'Chen&nbsp;xin&nbsp;is&nbsp;good'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"My&nbsp;name&nbsp;is&nbsp;&#123;name&#125;".format(name="Chen&nbsp;xin")&nbsp;#&nbsp;引用名字为name的参数</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'My&nbsp;name&nbsp;is&nbsp;Chen&nbsp;xin'</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p><strong>1. 类型转换</strong></p> 
<ul><li> <p>!s</p> </li><li> <p>!r</p> </li></ul>
<pre data-index="1"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"Chen&nbsp;xin&nbsp;is&nbsp;a&nbsp;cute&nbsp;&#123;!s&#125;".format("baby")&nbsp;#&nbsp;!s&nbsp;相当于对于参数调用str()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'Peppa&nbsp;pig&nbsp;is&nbsp;a&nbsp;cute&nbsp;baby'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"Chen&nbsp;xin&nbsp;is&nbsp;a&nbsp;cute&nbsp;&#123;!r&#125;".format("baby")&nbsp;#&nbsp;!r&nbsp;相当于对于参数调用repr()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;"Peppa&nbsp;pig&nbsp;is&nbsp;a&nbsp;cute&nbsp;'baby'"</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p><strong>2. 通过位置来填充字符串</strong></p> 
<pre data-index="2"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;0&#125;,&nbsp;&#123;1&#125;,&nbsp;&#123;2&#125;'.format('a',&nbsp;'b',&nbsp;'c'))&nbsp;&nbsp;#&nbsp;a,&nbsp;b,&nbsp;c</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;&#125;,&nbsp;&#123;&#125;,&nbsp;&#123;&#125;'.format('a',&nbsp;'b',&nbsp;'c'))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;a,&nbsp;b,&nbsp;c</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;2&#125;,&nbsp;&#123;1&#125;,&nbsp;&#123;0&#125;'.format('a',&nbsp;'b',&nbsp;'c'))&nbsp;&nbsp;#&nbsp;c,&nbsp;b,&nbsp;a</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;2&#125;,&nbsp;&#123;1&#125;,&nbsp;&#123;0&#125;'.format(*'abc'))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;c,&nbsp;b,&nbsp;a</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;0&#125;&nbsp;&#123;1&#125;&nbsp;&#123;0&#125;'.format('aa',&nbsp;'bb'))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;aa&nbsp;bb&nbsp;aa</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>同一个参数可以填充多次，这个是format比%先进的地方</p> 
<p><strong>3. 按名称访问参数</strong></p> 
<pre data-index="3"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('name:&nbsp;&#123;last_name&#125;&#123;first_name&#125;'.format(last_name='chen',&nbsp;first_name='xin'))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;name:&nbsp;chenxin</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">name=&nbsp;&#123;'last_name':&nbsp;'chen',&nbsp;'first_name':&nbsp;'xin'&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('name:&nbsp;&#123;last_name&#125;,&nbsp;&#123;first_name&#125;'.format(**name))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;name:&nbsp;chenxin</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p><strong>4.&nbsp;通过参数属性访问</strong></p> 
<pre data-index="4"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">class&nbsp;MyList:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;x,&nbsp;y):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.x,&nbsp;self.y&nbsp;=&nbsp;x,&nbsp;y</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__str__(self):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'MyList(&#123;self.x&#125;,&nbsp;&#123;self.y&#125;)'.format(self&nbsp;=&nbsp;self)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print(str(MyList('陈新明',&nbsp;'www.chenxm.cc')))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;网站名：陈新明,&nbsp;地址&nbsp;www.chenxm.cc</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p><strong>5. 通过参数的items访问</strong></p> 
<pre data-index="5"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">my_list&nbsp;=&nbsp;['陈新明',&nbsp;'www.chenxm.cc']</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print("网站名：&#123;0[0]&#125;,&nbsp;地址&nbsp;&#123;0[1]&#125;".format(my_list))&nbsp;&nbsp;#&nbsp;"0"&nbsp;是必须的</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;网站名：陈新明,&nbsp;地址&nbsp;www.chenxm.cc</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p><strong>6.&nbsp;对齐字符串</strong></p> 
<pre data-index="6" class="set-code-hide" name="code"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"&#123;:&gt;5&#125;".format(1)&nbsp;#&nbsp;设置宽度为5，右对齐</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"&#123;:&gt;5&#125;".format(10)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"&#123;:&gt;5&#125;".format(100)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"&#123;:&gt;5&#125;".format(1000)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出下面的结果</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">'&nbsp;&nbsp;&nbsp;&nbsp;1'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">'&nbsp;&nbsp;&nbsp;10'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">'&nbsp;&nbsp;100'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">'&nbsp;1000'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;:_&lt;30&#125;'.format('left&nbsp;aligned'))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#'left&nbsp;aligned__________________'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;:_&gt;30&#125;'.format('right&nbsp;aligned'))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#'__________________right&nbsp;aligned'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;:_^30&#125;'.format('centered'))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#'__________________centered__________________'</div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<ul><li> <p><strong>^</strong>&nbsp; &nbsp;居中&nbsp; &nbsp; &nbsp;后面带宽度，</p> </li><li> <p><strong>&lt;</strong>&nbsp; &nbsp;左对齐&nbsp;后面带宽度，</p> </li><li> <p><strong>&gt;</strong>&nbsp; &nbsp;右对齐 后面带宽度，</p> </li><li> <p><strong>&nbsp;:</strong>&nbsp; &nbsp;号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p> </li></ul>
<p><strong>7.&nbsp;截断字符串</strong></p> 
<pre data-index="7"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">'&#123;:.5&#125;'.format('Hello&nbsp;Chen')&nbsp;#&nbsp;截取前5个字符</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'Hello'</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p><strong>8.&nbsp;数字格式化</strong></p> 
<pre data-index="8"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print("&#123;:.2f&#125;".format(3.1415926));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;3.14</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>&nbsp;</p> 
<ul><li> <p>+ 表示在正数前显示 +，</p> </li><li> <p>-&nbsp; 负数&nbsp;&nbsp;</p> </li><li> <p>（空格） 表示在正数前加空格</p> </li><li> <p>b&nbsp;&nbsp;二进制</p> </li><li> <p>d&nbsp;&nbsp;十进制</p> </li><li> <p>o&nbsp;&nbsp;八进制</p> </li><li> <p>x&nbsp; 十六进制</p> </li></ul>
<p>&nbsp;</p> 
<p>更多样式</p> 
<p>&nbsp;</p> 
<p>9.&nbsp;使用逗号作为千位分隔符</p> 
<pre data-index="9"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;:,&#125;'.format(1234567890))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#'1,234,567,890'</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>10. 表示一个百分比</p> 
<p>&nbsp;</p> 
<pre data-index="10"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('number:&nbsp;&#123;:.2%&#125;'.format(0.61898))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;number:&nbsp;61.90%</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>11.&nbsp;时间格式化</p> 
<pre data-index="11"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import&nbsp;datetime</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">d&nbsp;=&nbsp;datetime.datetime(2018,&nbsp;7,&nbsp;31,&nbsp;15,&nbsp;58,&nbsp;58)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">print('&#123;:%Y-%m-%d&nbsp;%H:%M:%S&#125;'.format(d))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;2018-07-31&nbsp;15:58:58</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>12.&nbsp;访问元组中的元素</p> 
<pre data-index="12"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">a&nbsp;=&nbsp;(1,2)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">'X:&nbsp;&#123;0[0]&#125;;&nbsp;&nbsp;Y:&nbsp;&#123;0[1]&#125;'.format(a)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'X:&nbsp;1;&nbsp;&nbsp;Y:&nbsp;2'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;注意：用%格式化字符串不支持此功能</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>13.&nbsp;访问字典中的元素</p> 
<pre data-index="13"><code class="language-html hljs language-xml"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">people&nbsp;=&nbsp;&#123;"name":&nbsp;"Chen",&nbsp;"age":&nbsp;18&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">"My&nbsp;name&nbsp;is&nbsp;&#123;p[name]&#125;&nbsp;and&nbsp;my&nbsp;age&nbsp;is&nbsp;&#123;p[age]&#125;".format(p=people&nbsp;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;输出&nbsp;'My&nbsp;name&nbsp;is&nbsp;Chen&nbsp;and&nbsp;my&nbsp;age&nbsp;is&nbsp;18'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">#&nbsp;注意：用%格式化字符串不支持此功能</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p>原文：<a href="http://www.chenxm.cc/post/638.html?csdn">python format用法详解</a></p>
                </div><div><div></div></div>
        </div>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>git入门</title>
    <url>/2022/08/04/git%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><p>Git是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。Git有什么特点？简单来说就是：高端大气上档次！</p>
<h2 id="版本库介绍"><a href="#版本库介绍" class="headerlink" title="版本库介绍"></a>版本库介绍</h2><p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<h2 id="git基础的命令"><a href="#git基础的命令" class="headerlink" title="git基础的命令"></a>git基础的命令</h2><p>1.创建工作目录</p>
<blockquote>
<p>mkdir learngit        #创建文件夹<br>cd learngit           #转到learngit文件夹的目录<br>pwd                   #显示路径</p>
</blockquote>
<p>2.通过git init命令把这个目录变成Git可以管理的仓库</p>
<blockquote>
<p>$ git init<br>Initialized empty Git repository in &#x2F;Users&#x2F;michael&#x2F;learngit&#x2F;.git&#x2F;</p>
</blockquote>
<p>3.添加与提交</p>
<blockquote>
<p>git add readme.txt     #进行提交文件，应该在缓存<br>git commit             #用命令git commit告诉Git，把文件提交到仓库<br>git commit -m “wrote a readme file”  #提交时有信息</p>
</blockquote>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><strong>使用命令git add <file>，注意，可反复多次使用，添加多个文件；使用命令git commit -m <message>，完成。</strong></p>
<span id="more"></span>
<h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h2 id="git版本回溯"><a href="#git版本回溯" class="headerlink" title="git版本回溯"></a>git版本回溯</h2><h3 id="git版本回溯命令"><a href="#git版本回溯命令" class="headerlink" title="git版本回溯命令"></a>git版本回溯命令</h3><blockquote>
<p>git log                    #简短的版本信息<br>git log –pretty&#x3D;oneline   #经过处理的版本信息</p>
</blockquote>
<p><strong>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</strong></p>
<blockquote>
<p>git reset –hard HEAD^     #回溯到前一个版本（HEAD相当于指针）<br>git log                    #命令显示从最近到最远的提交日志<br>git reflog                 #方便找到每次提交的版本号</p>
</blockquote>
<h3 id="指针的示意图："><a href="#指针的示意图：" class="headerlink" title="指针的示意图："></a>指针的示意图：</h3><p>1.HEAD从指向append GPL<br>┌────┐<br>│HEAD│<br>└────┘<br>   │<br>   └──&gt; ○ append GPL<br>        │<br>        ○ add distributed<br>        │<br>        ○ wrote a readme file<br>2.改为指向add distributed<br>┌────┐<br>│HEAD│<br>└────┘<br>   │<br>   │    ○ append GPL<br>   │    │<br>   └──&gt; ○ add distributed<br>        │<br>        ○ wrote a readme file</p>
<p><em>HEAD指向哪个版本号，你就把当前版本定位在哪，以此实现版本的更新的保存和回退</em></p>
<h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul>
<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</li>
<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>1.版本库（Repository）<br>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>2.文件添加进git版本库的过程</p>
<ul>
<li>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区</li>
<li>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br><em>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</em><br><em>可以多次添加，最后统一把缓存区的文件提交到分支上</em></li>
</ul>
<h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><blockquote>
<p>git status    #查看工作文件夹的状态,如果有修改未提交(git add)，则会报错</p>
</blockquote>
<h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>1.git commit 提交到分支的内容是暂存区的内容，有修改必须git add ,不然会产生报错，当前文件的内容和分支上的内容不相符<br>2.git diff HEAD – readme.txt命令可以查看工作区和版本库里面最新版本的区别</p>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>1.情况一：readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<blockquote>
<p>git checkout – file</p>
</blockquote>
<p><em>命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令</em></p>
<p>2.情况2：readme.txt  #已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态</p>
<blockquote>
<p>git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：<br>git checkout – readme.txt  #丢弃工作区的修改</p>
</blockquote>
<p>3.小结</p>
<ul>
<li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
</li>
<li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</p>
</li>
<li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
</li>
</ul>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>1.git命令</p>
<blockquote>
<p>rm <file>      #删除工作目录中的文件<br>git rm <file>  #删除版本库中的文件（一般必须工作目录中也没有这个文件）<br>git checkout – test.txt #解决误删的情况</p>
</blockquote>
<p><em>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</em></p>
<p>2.小结<br>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>1.远程仓库介绍<br>集中式版本控制系统SVN也可以完成上面功能，去解决文件备份或者丢失的问题<br>git的优势：Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。<br>实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。<br><strong>Github</strong>就充当了代码托管的功能<br>2.git命令</p>
<ul>
<li><blockquote>
<p>ssh-keygen -t rsa -C “<a href="mailto:&#x79;&#x6f;&#117;&#114;&#101;&#x6d;&#x61;&#105;&#108;&#64;&#x65;&#x78;&#97;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x79;&#x6f;&#117;&#114;&#101;&#x6d;&#x61;&#105;&#108;&#64;&#x65;&#x78;&#97;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;</a>“ #ssh绑定</p>
</blockquote>
</li>
<li><blockquote>
<p>git remote add origin <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:michaelliao&#x2F;learngit.git #将本地仓库建立联系,origin相当于别名，可以起别的名字</p>
</blockquote>
</li>
<li><blockquote>
<p>git push -u origin master #本地库的所有内容推送到远程库上</p>
</blockquote>
</li>
</ul>
<p><em>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</em><br><em>以上内容第一次连接及推送时需要，后面就可以简化命令了</em></p>
<ul>
<li><blockquote>
<p>git pull –rebase origin master 将github修改的文件更新到本地</p>
</blockquote>
</li>
<li><blockquote>
<p>git push origin master 简化的推送远程仓库的命令</p>
</blockquote>
</li>
</ul>
<p><em>大多数时候由于本地库和远程库的更新进度不同，可以利用先pull再push来解决</em></p>
<h2 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h2><p>1.git命令</p>
<ul>
<li><blockquote>
<p>git remote -v        #查看远程库信息</p>
</blockquote>
</li>
<li><blockquote>
<p>git remote rm <name> #大多数时候name为origin，而不是GitHub中仓库的名字</p>
</blockquote>
</li>
</ul>
<p><em>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</em></p>
<h2 id="克隆远程库"><a href="#克隆远程库" class="headerlink" title="克隆远程库"></a>克隆远程库</h2><p>1.git命令</p>
<ul>
<li><blockquote>
<p>$ git clone <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a>:michaelliao&#x2F;gitskills.git</p>
</blockquote>
</li>
</ul>
<p>2.小结</p>
<ul>
<li><p>git常用协议为<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>，但GitHub给出的地址不止一个，还可以用<a href="https://github.com/michaelliao/gitskills.git%E8%BF%99%E6%A0%B7%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82%E5%AE%9E%E9%99%85%E4%B8%8A%EF%BC%8CGit%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E5%8D%8F%E8%AE%AE%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84git://%E4%BD%BF%E7%94%A8ssh%EF%BC%8C%E4%BD%86%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8https%E7%AD%89%E5%85%B6%E4%BB%96%E5%8D%8F%E8%AE%AE%E3%80%82">https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。</a></p>
</li>
<li><p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https</p>
</li>
<li><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。Git支持多种协议，包括https，但ssh协议速度最快。</p>
</li>
</ul>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>分支的作用：在团队或自己做的一个大型的项目中，你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</li>
<li>具体应用举例：一个单片机工程中去修改一个外设的应用或配置时</li>
<li>git的优势：无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</li>
</ul>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p><em>题外话：个人感觉分支的内容有些难以理解，我第一次学的时候也没有搞懂，但是时隔一年之后，我现在学完了算法与数据结构（依托于c语言），感觉比较的熟悉，对于这个内容</em></p>
<h3 id="git命令-1"><a href="#git命令-1" class="headerlink" title="git命令"></a>git命令</h3><p>1.创建dev分支，然后切换到dev分支</p>
<blockquote>
<p>git checkout -b dev</p>
</blockquote>
<p><em>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:</em> </p>
<blockquote>
<p>git branch dev</p>
</blockquote>
<blockquote>
<p>git checkout dev</p>
</blockquote>
<p>2.然后，用git branch命令查看当前分支：</p>
<blockquote>
<p>git branch<br>*dev<br> master</p>
</blockquote>
<p><em>git branch命令会列出所有分支，当前分支前面会标一个</em>号</p>
<p>3.修改并提交文件</p>
<blockquote>
<p>$ git add readme.txt<br>$ git commit -m “branch test”</p>
</blockquote>
<p>4.现在，dev分支的工作完成，我们就可以切换回master分支</p>
<blockquote>
<p>git checkout master</p>
</blockquote>
<p><em>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：</em></p>
<p>5.现在，我们把dev分支的工作成果合并到master分支上：</p>
<blockquote>
<p>git merge dev</p>
</blockquote>
<p><em>git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。</em></p>
<p><em>git merge语句中，需要注意的是那个指针指向另外一个指针指向的位置</em></p>
<p><em>git merge合并指定分支到当前分支，及将当前分支的指针指向我们选择的指定分支所指向的内容</em></p>
<p>6.合并完成后，就可以放心地删除dev分支了</p>
<blockquote>
<p>git branch -d dev</p>
</blockquote>
<p>7.删除后，查看branch，就只剩下master分支了</p>
<blockquote>
<p>git branch -d dev</p>
</blockquote>
<h3 id="额外的转换分支指令-switch"><a href="#额外的转换分支指令-switch" class="headerlink" title="额外的转换分支指令 switch"></a>额外的转换分支指令 switch</h3><p>1.创建并切换到新的dev分支，可以使用</p>
<blockquote>
<p>git switch -c dev<br>2.直接切换到已有的master分支，可以使用：<br>git switch master</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>查看分支：git branch</p>
<p>创建分支：git branch <name></p>
<p>切换分支：git checkout <name>或者git switch <name></p>
<p>创建+切换分支：git checkout -b <name>或者git switch -c <name></p>
<p>合并某分支到当前分支：git merge <name></p>
<p>删除分支：git branch -d <name></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>lingo常用语法</title>
    <url>/2022/08/08/lingo%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>lingo的一些另类的规定:<br>1.变量名不区分大小写<br>2.以分号作为结尾<br>3.默认变量大于等于0<br>4.一般&gt;等价于&gt;&#x3D;,小于号&lt;同理</p>
<p>lingo一般用于规划问题中,对于概率统计等计算也有优势;</p>
<p>除了这两种模型计算之外,还是推荐matlab，lingo和matlab的数据交互一般通过本地文件进行，包括excel表和文本文件，<br>不过作者目前只掌握了excel表的方法。</p>
<span id="more"></span>

<h2 id="lingo的工程目录："><a href="#lingo的工程目录：" class="headerlink" title="lingo的工程目录："></a>lingo的工程目录：</h2><p>1.目标和约束 2.集合 3.数据 4.初始</p>
<h2 id="lingo的运算符："><a href="#lingo的运算符：" class="headerlink" title="lingo的运算符："></a>lingo的运算符：</h2><p>算术运算符 逻辑运算符 关系运算符</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>LINGO 具有９种逻辑运算符： </p>
<p>#not# 否定该操作数的逻辑值，＃not＃是一个一元运算符 </p>
<p>#eq# 若两个运算数相等，则为 true；否则为 flase</p>
<p>#ne# 若两个运算符不相等，则为 true；否则为 flase </p>
<p>#gt# 若左边的运算符严格大于右边的运算符，则为 true；否则为 flase </p>
<p>#ge# 若左边的运算符大于或等于右边的运算符，则为 true；否则为 flase </p>
<p>#lt# 若左边的运算符严格小于右边的运算符，则为 true；否则为 flase </p>
<p>#le# 若左边的运算符小于或等于右边的运算符，则为 true；否则为 flase </p>
<p>#and# 仅当两个参数都为 true 时，结果为 true；否则为 flase </p>
<p>#or# 仅当两个参数都为 false 时，结果为 false；否则为 true </p>
<p>这些运算符的优先级由高到低为： </p>
<p>高 #not#<br> #eq# #ne# #gt# #ge# #lt# #le# </p>
<p>低 #and# #or#</p>
<p>2 #gt# 3 #and# 4 #gt# 2，其结果为假（0）。 </p>
<p><strong>一般逻辑运算符用于分支结构和for循环中，用于for循环中，|代表着过滤器的概念，可以简单理解为且的条件</strong></p>
<p>变量类型限制函数:</p>
<p><strong>一般无约束，默认变量非负</strong></p>
<p>@bin(x)：限制 x 为 0 或 1；<br>@bnd(L,x,U)：限制 L≤x≤U；<br>@free(x)：取消对变量 x 的默认下界为 0 的限制，即 x 可以取任意实数；<br>@gin(x)：限制 x 为整数。 </p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数:"></a>常用函数:</h2><p>1．@for<br>该函数用来产生对集成员的约束。基于建模语言的标量需要显式输入每个约束，不过@for 函数允许只输入一个约束，然后 LINGO 自动产生每个集成员的约束。<br>例 5.10 产生序列{1,4,9,16,25}<br>model:<br>sets:<br> number&#x2F;1..5&#x2F;:x;<br>endsets<br> @for(number(I): x(I)&#x3D;I^2);<br>end<br>2．@sum<br>该函数返回遍历指定的集成员的一个表达式的和。<br>例 5.11 求向量[5，1，3，4，6，10]前 5 个数的和。<br>model:<br>data:<br> N&#x3D;6;<br>enddata<br>sets:<br> number&#x2F;1..N&#x2F;:x;<br>endsets<br>data:<br> x &#x3D; 5 1 3 4 6 10;<br>enddata<br> s&#x3D;@sum(number(I) | I #le# 5: x);<br>end</p>
<p>@if(logical_condition,true_result,false_result)<br>@if 函数将评价一个逻辑表达式 logical_condition，如果为真，返回 true_<br>result，否则返回 false_result。<br>其 LINGO 代码如下：<br>model:<br> min&#x3D;fx+fy;<br> fx&#x3D;@if(x #gt# 0, 100,0)+2<em>x;<br> fy&#x3D;@if(y #gt# 0,60,-y)+3</em>y;<br> x+y&gt;&#x3D;30;<br>end</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模软件</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab与图论</title>
    <url>/2022/08/22/matlab%E4%B8%8E%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>主要介绍图论中的一些基础名词和一些图论中的算法，依靠matlab运行</p>
<span id="more"></span>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li>邻接矩阵<br>逻辑结构分为两部分：V和E集合，其中，V是顶点，E是边。因此，用一个一维数组存放图中所有顶点数据；用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵（看矩阵是否对称）</li>
</ul>
<h2 id="算法的介绍"><a href="#算法的介绍" class="headerlink" title="算法的介绍"></a>算法的介绍</h2><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基本思想：</span><br><span class="line">弗洛伊德算法定义了两个二维矩阵：</span><br><span class="line"></span><br><span class="line">矩阵D记录顶点间的最小路径</span><br><span class="line">例如D[0][3]= 10，说明顶点0 到 3 的最短路径为10；</span><br><span class="line">矩阵P记录顶点间最小路径中的中转点</span><br><span class="line">例如P[0][3]= 1 说明，0 到 3的最短路径轨迹为：0 -&gt; 1 -&gt; 3。</span><br><span class="line">它通过3重循环，k为中转点，v为起点，w为终点，循环比较D[v][w] 和 D[v][k] + D[k][w] 最小值，如果D[v][k] + D[k][w] 为更小值，则把D[v][k] + D[k][w] 覆盖保存在D[v][w]中。</span><br></pre></td></tr></table></figure>

<p>代码实现：</p>
<ul>
<li>c语言<br>结构定义<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct struct_graph&#123;</span><br><span class="line">    char vexs[MAXN];</span><br><span class="line">    int vexnum;//顶点数 </span><br><span class="line">    int edgnum;//边数 </span><br><span class="line">    int matirx[MAXN][MAXN];//邻接矩阵 </span><br><span class="line">&#125; Graph;</span><br></pre></td></tr></table></figure>
弗洛伊德算法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这里是弗洛伊德算法的核心部分 </span><br><span class="line">    //k为中间点 </span><br><span class="line">    for(k = 0; k &lt; G.vexnum; k++)&#123;</span><br><span class="line">        //v为起点 </span><br><span class="line">        for(v = 0 ; v &lt; G.vexnum; v++)&#123;</span><br><span class="line">            //w为终点 </span><br><span class="line">            for(w =0; w &lt; G.vexnum; w++)&#123;</span><br><span class="line">                if(D[v][w] &gt; (D[v][k] + D[k][w]))&#123;</span><br><span class="line">                    D[v][w] = D[v][k] + D[k][w];//更新最小路径 </span><br><span class="line">                    P[v][w] = P[v][k];//更新最小路径中间顶点 </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>matlab</li>
</ul>
<h2 id="图像可视化"><a href="#图像可视化" class="headerlink" title="图像可视化"></a>图像可视化</h2><pre><code>kk=size(B,1);  %列数
for i=1:kk
    if B(i,2)&lt;=92
    plot([A(B(i,1),2),A(B(i,2),2)],[A(B(i,1),3),A(B(i,2),3)],&#39;.-&#39;);
    end
end
for i=1:92
    if i&lt;=20
        text(A(i,2),A(i,3),&#39;A&#39;);
        text(A(i,2)+2,A(i,3),num2str(i));
    else
        text(A(i,2),A(i,3),num2str(i));
    end
end
</code></pre>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab入门概述</title>
    <url>/2022/08/15/matlab%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>matlab的全称是矩阵实验室，是由美国mathworks公司生产的一款不仅可以用于工科中像机器人仿真、数字信号处理、动态系统仿真等功能，还包括像理科中数理统计等功能。</p>
<p>总的来说，matlab给我的感觉就像是嵌入式开发中的keil一样。可能是因为横向的对比吧，这两款工业软件的操作比较的简洁，比较容易使用。</p>
<p>另外,matlab不单单只是一个软件，它还是一个编程语言。虽然现在的排名已经下降到20名了，但是当你熟练使用matlab之后，你是真的可以用matlab编写一个exe程序的。不过现在没有时间实践，只能简单做一些依靠matlab软件运行的人机交互处理程序(通过人工进行选择)，<del>人工智能</del></p>
<span id="more"></span>
<h2 id="matlab入门内容目录"><a href="#matlab入门内容目录" class="headerlink" title="matlab入门内容目录"></a>matlab入门内容目录</h2><h3 id="1-matlab程序设计基础"><a href="#1-matlab程序设计基础" class="headerlink" title="1.matlab程序设计基础"></a>1.matlab程序设计基础</h3><h3 id="2-matlab数值运算"><a href="#2-matlab数值运算" class="headerlink" title="2.matlab数值运算"></a>2.matlab数值运算</h3><h3 id="3-matlab符号运算"><a href="#3-matlab符号运算" class="headerlink" title="3.matlab符号运算"></a>3.matlab符号运算</h3><h3 id="4-matlab矩阵运算"><a href="#4-matlab矩阵运算" class="headerlink" title="4.matlab矩阵运算"></a>4.matlab矩阵运算</h3><h3 id="5-matlab图像绘制功能"><a href="#5-matlab图像绘制功能" class="headerlink" title="5.matlab图像绘制功能"></a>5.matlab图像绘制功能</h3><h2 id="matlab与线性代数的结合"><a href="#matlab与线性代数的结合" class="headerlink" title="matlab与线性代数的结合"></a>matlab与线性代数的结合</h2><h3 id="1-矩阵的运算"><a href="#1-矩阵的运算" class="headerlink" title="1.矩阵的运算"></a>1.矩阵的运算</h3><h3 id="2-矩阵的分解"><a href="#2-矩阵的分解" class="headerlink" title="2.矩阵的分解"></a>2.矩阵的分解</h3><h3 id="3-线性方程组的求解"><a href="#3-线性方程组的求解" class="headerlink" title="3.线性方程组的求解"></a>3.线性方程组的求解</h3><h3 id="4-特征值和二次型"><a href="#4-特征值和二次型" class="headerlink" title="4.特征值和二次型"></a>4.特征值和二次型</h3><h3 id="5-秩与线性相关性"><a href="#5-秩与线性相关性" class="headerlink" title="5.秩与线性相关性"></a>5.秩与线性相关性</h3><h3 id="6-稀疏矩阵技术"><a href="#6-稀疏矩阵技术" class="headerlink" title="6.稀疏矩阵技术"></a>6.稀疏矩阵技术</h3><h2 id="MATLAB的辅助功能"><a href="#MATLAB的辅助功能" class="headerlink" title="MATLAB的辅助功能"></a>MATLAB的辅助功能</h2><h3 id="1-GUI的设计"><a href="#1-GUI的设计" class="headerlink" title="1.GUI的设计"></a>1.GUI的设计</h3><h3 id="2-文件的读取和写入"><a href="#2-文件的读取和写入" class="headerlink" title="2.文件的读取和写入"></a>2.文件的读取和写入</h3><p><strong>PS：</strong><br>线性代数是比较重要的一般工具<br>高等数学</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模软件</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab数据的导入与输出</title>
    <url>/2022/08/22/matlab%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%BC%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>介绍matlab数据与xlsx表格数据的交互</p>
<span id="more"></span>

<h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数:"></a>常用的函数:</h2><ul>
<li><p>Fopen函数</p>
<p>  x&#x3D;[1 2 3 4];%要存入的数据矩阵。</p>
<p>  fp&#x3D;fopen(‘A.txt’,’a’);%’A.txt’为文件名；’a’为打开方式：在打开的文件末端添加数据，若文件不存在则创建。</p>
<p>  fprintf(fp,’%d ‘,x);%fp为文件句柄，指定要写入数据的文件。注意：%d后有空格。</p>
<p>  fclose(fp);%关闭文件。</p>
<p>  ‘r’	打开要读取的文件。</p>
<p>  ‘w’	打开或创建要写入的新文件。放弃现有内容（如果有）。</p>
<p>  ‘a’	打开或创建要写入的新文件。追加数据到文件末尾。</p>
<p>  ‘r+’	打开要读写的文件。</p>
<p>  ‘w+’	打开或创建要读写的新文件。放弃现有内容（如果有）。</p>
<p>  ‘a+’	打开或创建要读写的新文件。追加数据到文件末尾。</p>
<p>  ‘A’	打开文件以追加（但不自动刷新）当前输出缓冲区。</p>
<p>  ‘W’	打开文件以写入（但不自动刷新）当前输出缓冲区。</p>
<p>  Text函数<br>  具有标记的功能</p>
<p>  Xlsread函数</p>
<p>  xlsread(filename,sheet,xlRange)</p>
<p>  [num,txt,raw] &#x3D; xlsread(‘myExample.xlsx’)</p>
</li>
<li><p>Regress函数</p>
<p>  [b,bint,r,rint,stats] &#x3D; regress(y,X) 还返回向量 stats，其中包含 R2 统计量、F 统计量及其 p 值，以及误差方差的估计值。矩阵 X 必须包含一个由 1 组成的列，以便软件正确计算模型统计量。</p>
</li>
<li><p>数据类型转换：</p>
<p>  Table类型转成矩阵类型：table2array</p>
<p>  fliplr 函数介绍（从左到右翻转阵列）</p>
<p>  最小二乘拟合lsqcurvefit<br>  x &#x3D; lsqcurvefit(fun,x0,xdata,ydata,lb,ub,options) 使用 options 所指定的优化选项执行最小化。使用 optimoptions 可设置这些选项。如果不存在边界，则为 lb 和 ub 传递空矩阵。</p>
<p>  向量数据拟合命令  </p>
<p>  图像处理函数<br>  uiopen</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的simulink</title>
    <url>/2022/09/25/matlab%E7%9A%84simulink/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>matlab的simulink功能，我在学习的过程中可能比较零散，所以采取问答的形式记录内容</p>
<span id="more"></span>

<p>1.如何让scope示波器同时观察和对比两个相关的信号源</p>
<p>增加端口的数量</p>
]]></content>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的数据类型</title>
    <url>/2022/08/19/matlab%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>matlab中的变量的命名规则：</p>
<p>1.变量名必须以字母开头，之后可以是任意的字母，数字或下划线。</p>
<p>2.变量名区分字母的大小写</p>
<p>3.变量名不超过31个字符，第31个字符以后的字符会被忽略。<br><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1177410109,433311031&fm=173&app=25&f=JPEG?w=640&h=601&s=8A287C2211CFC4E81C7524DA0000A0B1" alt="matlab的数据类型"></p>
<span id="more"></span>
<h2 id="matlab中的常量"><a href="#matlab中的常量" class="headerlink" title="matlab中的常量"></a>matlab中的常量</h2><blockquote>
<p>1.ans：MATLAB中的默认变量<br>                   (相当于answer)<br>2.pi：圆周率</p>
<p>3.eps：浮点运算的相对精度</p>
<p>4.inf：无穷大，如1&#x2F;0</p>
<p>5.NaN：不定值，如0&#x2F;0，∞&#x2F;∞，0*∞</p>
<p>6.i(j)：复数中的虚数单位</p>
<p>7.realmin：最小正浮点数</p>
<p>8.realmax：最大正浮点数</p>
</blockquote>
<h2 id="matlab中的数据类型"><a href="#matlab中的数据类型" class="headerlink" title="matlab中的数据类型"></a>matlab中的数据类型</h2><p><strong>数值类型包括整型、浮点型、符号型、复数类型等。</strong></p>
<p>1.整型<br>整型数据是不包含小数部分的数值型数据，用字母I表示。整型数据只用来表示整数，以二进制形式存储。下面介绍整型数据的分类。</p>
<blockquote>
<p>·char：字符型数据，属于整型数据的一种，占用1个字节。</p>
<p>·unsigned char：无符号字符型数据，属于整&gt;型数据的一种，占用1个字节。</p>
<p>·short：短整型数据，属于整型数据的一种，占用2个字节。</p>
<p>·unsigned short：无符号短整型数据，属于整型数据的一种，占用2个字节。</p>
<p>·int：有符号整型数据，属于整型数据的一种，占用4个字节。</p>
<p>·unsigned int：无符号整型数据，属于整型数&gt;据的一种，占用4个字节。</p>
<p>·long：长整型数据，属于整型数据的一种，占用4个字节。</p>
<p>·unsigned long：无符号长整型数据，属于整型数据的一种，占用4个字节。</p>
</blockquote>
<p>2.浮点型<br>浮点型只采用十进制，有两种形式，即十进制数形式和指数形式。</p>
<blockquote>
<p>·十进制数形式：由数码0~9和小数点组成，如0.0、.25、5.789、0.13、5.0、-267.8230。</p>
<p>·指数形式：由十进制数，加阶码标志“e”或“E”以及阶码(只能为整数，可以带符号)组成。其一般形式为：</p>
</blockquote>
<p>a E n</p>
<p>其中a为十进制数，n为十进制整数，表示的值为a*10^n。</p>
<blockquote>
<p>例如，2.1E5等于2.1 * 10^5，3.7E-2等于3.7* 10^(-2),-2.8E-2等于-2.8*10^(-2)。</p>
</blockquote>
<p>浮点型变量还可以分为两类：单精度型和双精度型。</p>
<blockquote>
<p>·float：单精度说明符，占4个字节(32位)内存空间，其数值范围为3.4E-38~3.4E+38，只能提供7个有效数字。</p>
<p>·double：双精度说明符，占8个字节(32位)内存空间，期数值范围为1.7E-308~1.7E+308,可提供16为有效数字。</p>
</blockquote>
<p><strong>format：控制数字显示格式的命令</strong></p>
<blockquote>
<p>·format short：5位定点表示（默认值）</p>
<p>·format long：15位定点表示</p>
<p>·format short e：5位浮点表示</p>
<p>·format long e：15位浮点表示</p>
<p>·format short g：在5位定点和5位浮点中选择最好的格式表示，MATLAB自动选择</p>
<p>·format long g： 在15位定点和15位浮点中选择最好的格式表示，MATLAB自动选择</p>
<p>·format hex：十六进制格式表示</p>
<p>·format +：在矩阵中，用符号+、-和空格表示正号、符号、零</p>
<p>·format bank：用美元与美分定点表示</p>
<p>·format rat：以有理数形式输出结果</p>
<p>·format compact：变量之间没有空行</p>
<p>·format loose：变量之间有空行</p>
</blockquote>
<p><strong>相应的函数</strong></p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="right">运算法则</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">floor</td>
<td align="right">向下取整</td>
<td align="center">floor(1.4)&#x3D;1;floor(3.5)&#x3D;3;floor(-3.5)&#x3D;-4</td>
</tr>
<tr>
<td align="left">ceil</td>
<td align="right">向上取整</td>
<td align="center">ceil(1.4)&#x3D;2;ceil(3.5)&#x3D;3;ceil(-3.5)&#x3D;-3</td>
</tr>
<tr>
<td align="left">round</td>
<td align="right">取最接近的整数，如果小数部分是0.5，则向绝对值大的方向取整</td>
<td align="center">round(1.4)&#x3D;1;round(3.5)&#x3D;4;round(-3.5)&#x3D;-4</td>
</tr>
<tr>
<td align="left">fix</td>
<td align="right">向0取整     fix(1.4)&#x3D;1;fix(3.5)&#x3D;3;fix(-3.5)&#x3D;-3</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>PS:注意，matlab是在复数域里面计算，有可能产生虚数。</p>
<p>3.字符型<br>Matlab将文本作为特征字符串或简单地当做字符串，但是实际存储的是字符串的ASCII码。abs函数可以获得字符串的具体值，使用方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;a=&#x27;abc&#x27;</span><br><span class="line"></span><br><span class="line">a =</span><br><span class="line"></span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">&gt;&gt; abs(a)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    97    98    99</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、结构体</p>
<p>Matlab中也存在与C语言类似的结构这种类型，一个结构可以通过字段存储多个不同类型的数据。结构中的各个字段可以是不同的类型。</p>
<ul>
<li>创建对象<br>有两种创建结构的方法，一种是逐一输入一个结构的各个属性，例如下面创建stu1的过程；另一种是使用struct函数，例如创建stu2的过程。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; stu1.name=&#x27;xing&#x27;;</span><br><span class="line">&gt;&gt; stu1.sno=&#x27;123&#x27;;</span><br><span class="line">&gt;&gt; stu1</span><br><span class="line"></span><br><span class="line">stu1 = </span><br><span class="line"></span><br><span class="line">    name: &#x27;xing&#x27;</span><br><span class="line">     sno: &#x27;123&#x27;</span><br><span class="line"></span><br><span class="line">&gt;&gt; stu2=struct(&#x27;name&#x27;,&#x27;sno&#x27;,&#x27;xiao&#x27;,&#x27;234&#x27;)</span><br><span class="line"></span><br><span class="line">stu2 = </span><br><span class="line"></span><br><span class="line">    name: &#x27;sno&#x27;</span><br><span class="line">    xiao: &#x27;234&#x27;</span><br></pre></td></tr></table></figure></li>
<li>访问结构对象</li>
</ul>
<p>使用结构名.属性名的方式可以获取结构的属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; stu1.name</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">xing</span><br></pre></td></tr></table></figure>
<ul>
<li>连接结构对象</li>
</ul>
<p>两个结构可以连接起来，但是要连接的这个两个结构的对应属性的类型应该相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; stu1.name=&#x27;xing&#x27;;</span><br><span class="line">&gt;&gt; stu1.sno=int16(123);</span><br><span class="line">&gt;&gt; stu2.name=&#x27;xiao&#x27;;</span><br><span class="line">&gt;&gt; stu2.sno=int16(456);</span><br><span class="line">&gt;&gt; stu=[stu1,stu2]</span><br><span class="line"></span><br><span class="line">stu = </span><br><span class="line"></span><br><span class="line">1x2 struct array with fields:</span><br><span class="line"></span><br><span class="line">    name</span><br><span class="line">    sno</span><br><span class="line"></span><br><span class="line">&gt;&gt; stu(1)</span><br><span class="line"></span><br><span class="line">ans = </span><br><span class="line"></span><br><span class="line">    name: &#x27;xing&#x27;</span><br><span class="line">     sno: 123</span><br></pre></td></tr></table></figure>
<p>4单元数组</p>
<p>单元数组是一种广义矩阵。每一个单元可以包括一个任意数组，如数值数组、字符数组、结构体数组或另外一个单元数组，因而每一个单元可以具有不同的尺寸和内存</p>
<ul>
<li>创建单元数组<br>有两种创建单元数组的方法：通过赋值语句或cell函数创建。</li>
</ul>
<p>（a）使用赋值语句创建单元数组：单元数组使用花括号”{} ”来创建，使用“，”或空格来分隔单元，使用“；”来分行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=&#123;&#x27;x&#x27;,[2;3;6];10,2*pi&#125;</span><br><span class="line"></span><br><span class="line">A = </span><br><span class="line"></span><br><span class="line">    &#x27;x&#x27;     [3x1 double]</span><br><span class="line">    [10]    [    6.2832]</span><br></pre></td></tr></table></figure>

<p>（b）使用cell函数创建空单元数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; B=cell(2,2)</span><br><span class="line"></span><br><span class="line">B = </span><br><span class="line"></span><br><span class="line">    []    []</span><br><span class="line">    []    []</span><br></pre></td></tr></table></figure>
<ul>
<li>访问单元数组</li>
</ul>
<p>在单元数组中，单元和单元中的内容属于不同范畴，这意味着访问单元和访问单元中的内容是两个不同的操作。对于单元数组C，C（m，n）指的是单元数组中第m行第n列的单元，而C{m,n}则是指的是第m行第n列的单元中的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A(1,1)</span><br><span class="line"></span><br><span class="line">ans = </span><br><span class="line"></span><br><span class="line">    &#x27;x&#x27;</span><br><span class="line"></span><br><span class="line">&gt;&gt; A(1,2)</span><br><span class="line"></span><br><span class="line">ans = </span><br><span class="line"></span><br><span class="line">    [3x1 double]</span><br><span class="line"></span><br><span class="line">&gt;&gt; A&#123;1,2&#125;</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">     2</span><br><span class="line">     3</span><br><span class="line">     6</span><br></pre></td></tr></table></figure>
<p>3、单元数组的合并  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C=&#123;&#x27;a&#x27;,&#x27;b&#x27;;&#x27;c&#x27;,&#x27;d&#x27;&#125;</span><br><span class="line"></span><br><span class="line">C = </span><br><span class="line"></span><br><span class="line">    &#x27;a&#x27;    &#x27;b&#x27;</span><br><span class="line">    &#x27;c&#x27;    &#x27;d&#x27;</span><br><span class="line"></span><br><span class="line">&gt;&gt; D=&#123;&#x27;1&#x27;,&#x27;2&#x27;&#125;</span><br><span class="line"></span><br><span class="line">D = </span><br><span class="line"></span><br><span class="line">    &#x27;1&#x27;    &#x27;2&#x27;</span><br><span class="line"></span><br><span class="line">&gt;&gt; E=&#123;A;B&#125;</span><br><span class="line"></span><br><span class="line">E = </span><br><span class="line"></span><br><span class="line">    &#123;2x2 cell&#125;</span><br><span class="line">    &#123;2x2 cell&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; E&#123;1,1&#125;</span><br><span class="line"></span><br><span class="line">ans = </span><br><span class="line"></span><br><span class="line">    &#x27;x&#x27;     [3x1 double]</span><br><span class="line">    [10]    [    6.2832</span><br></pre></td></tr></table></figure>

<h2 id="数据类型之间的转换函数"><a href="#数据类型之间的转换函数" class="headerlink" title="数据类型之间的转换函数"></a>数据类型之间的转换函数</h2><p>类型识别函数：</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="right">功能</th>
<th align="center">函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">iscell</td>
<td align="right">判断是否为单元数组</td>
<td align="center">isnumeric</td>
<td>判断是否为数值数组</td>
</tr>
<tr>
<td align="left">isreal</td>
<td align="right">判断是否为实数</td>
<td align="center">ischar</td>
<td>判断是否为字符数组</td>
</tr>
<tr>
<td align="left">isstr</td>
<td align="right">判断是否为字符串</td>
<td align="center">isfloa</td>
<td>判断是否为浮点数</td>
</tr>
<tr>
<td align="left">isstruct</td>
<td align="right">判断是否为结构数组</td>
<td align="center">whos</td>
<td>列举变量类型及相关数据</td>
</tr>
</tbody></table>
<p>类型转换函数：</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="right">功能</th>
<th align="center">函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dec2bin</td>
<td align="right">十进制转为二进制</td>
<td align="center">int2str</td>
<td>整数转为字符串</td>
</tr>
<tr>
<td align="left">num2str</td>
<td align="right">数值转为字符串</td>
<td align="center">str2double</td>
<td>字符串转为double</td>
</tr>
</tbody></table>
<p>还有其他很多的转换函数，基本上都是类似的语法。</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的名词解释</title>
    <url>/2022/09/21/matlab%E7%9A%84%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>连通图：任意两个顶点之间均是连通的<br>强连通<br>弱连通</p>
<p>DP 动态规划</p>
<p>启发式算法</p>
<p>遗传算法 </p>
<h2 id="图论方面的知识"><a href="#图论方面的知识" class="headerlink" title="图论方面的知识:"></a>图论方面的知识:</h2><h3 id="临接矩阵"><a href="#临接矩阵" class="headerlink" title="临接矩阵"></a>临接矩阵</h3><p>   距离矩阵<br>   路径矩阵</p>
<h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><p>1.稀疏矩阵其非零元素的个数远远小于零元素的个数，而且这些非零元素的分布也没有规律。</p>
<p>2.稀疏因子是用于描述稀疏矩阵的非零元素的比例情况。设一个n*m的稀疏矩阵A中有t个非零元素，则稀疏因子δδ的计算公式如下：δ&#x3D;tn∗mδ&#x3D;tn∗m(当这个值小于等于0.05时，可以认为是稀疏矩阵)</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模软件</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的矩阵运算</title>
    <url>/2022/08/22/matlab%E7%9A%84%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><span id="more"></span>

<p>主题词    意义</p>
<p>zeros(n,m)：生成元素全为0的矩阵(n行m列)</p>
<p>ones(n)、ones(m,n):生成元素全为1的矩阵</p>
<p>eye(n)、eye(m,n):生成单位矩阵</p>
<p>rand(m,n):生成随机矩阵</p>
<p>trace(n):方阵的迹</p>
<p>diag:对角阵</p>
<p>tril:提取矩阵下三角部分</p>
<p>triu:提取矩阵上三角部分</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>pid的工程应用</title>
    <url>/2022/08/07/pid%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在理论学习中，我们接触的pid算法的公式大多都是连续的，这样的形式方便我们理解，以及后面的推导分析，比如进行拉普拉斯变换后，在频域中进行分析。</p>
<p>但是要使用计算机工具，你会发现离不开一个词语 <strong>离散化</strong>，必须离散化之后，我们才有进行下一步的可能。</p>
<p>无论是运行在pc还是mcu，只有离散的数字量计算机才会认识。</p>
<hr>
<p><em>你不喜欢做的事情，比如简单的加减乘除，计算机喜欢做。但是你可以做比如公式推导等，计算机做不了</em></p>
<pre><code>                             ----出自数学建模的指导老师
</code></pre>
<hr>
<span id="more"></span>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>1.离散化的pid公式</p>
<ul>
<li><p>位置式PID算法<br><img src="https://cdn.mathpix.com/snip/images/HXnn3khsAfVakJ-IHFhhtKZUpfryDK8maBU7p9i5wVE.original.fullsize.png" alt="位置式PID算法"><br>其实就是一般式的离散形式</p>
</li>
<li><p>增量式PID算法：<br><img src="https://cdn.mathpix.com/snip/images/DTmPe0HTvq1zOMvLRArZhurvyZbyKxbt1M5P3QZInTs.original.fullsize.png" alt="增量式PID算法"><br>增量式就是两个位置式相减的结果：<img src="https://cdn.mathpix.com/snip/images/K1TShhDzcz_3sHnSWmoeCIsxqpCbDx8bLhG9fQfQzLo.original.fullsize.png"></p>
</li>
</ul>
<p>2.位置式PID算法与增量式PID算法的区别</p>
<ul>
<li>增量式只与最近三次的误差有关，运算速度快且无累积误差，而位置式需要对误差进行积分，容易产生累积误差且运算速度慢。</li>
<li>增量式的结果是输出量的变化量，即便出现误差影响不会太大，而位置式的结果是输出量，一旦出现错误影响会很大。</li>
<li>增量式适合执行结构带积分部件，如步进电机，位置式适合执行结构不带积分部件，如电液伺服阀。</li>
</ul>
<p>3.总结</p>
<ul>
<li>一般使用的都是位置式pid，可以直接输出目标值</li>
<li>作者目前只调了速度环的pid，像位置环和角度环pid还没有调过。通过了解目前智能车的比赛，现在比较热的方法包括<strong>串级pid</strong>、<strong>模糊控制</strong>等，感觉自己离这些可能有些遥远</li>
<li>后面关于pid的工程应用学习，如果有时间可能会做一个pid的自动跟随小车。通过一个超声波测距模块，将反馈量变成距离，来实现与前方物体的特定距离的保持。</li>
</ul>
<h2 id="工程调试过程"><a href="#工程调试过程" class="headerlink" title="工程调试过程"></a>工程调试过程</h2><p>1.PID速度环调试教程</p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1654y1W7Rg?spm_id_from=333.999.0.0&vd_source=bf3c71dee2026aa580cae8283bd1ac68">视频教程</a></p>
</li>
<li><p><a href="https://pan.baidu.com/s/1Mgy1nuqzqzUyUfYzlobaig">代码文件-提取码：cbm8</a></p>
</li>
<li><p>代码结构分析<br> <img src="https://cdn.mathpix.com/snip/images/oMcG77AvZd8B9KCz0zJm91CiqG9nhZ7wBz2zWtpJGps.original.fullsize.png" alt="工程目录"></p>
<blockquote>
<p>#include “led.h”<br>  #include “delay.h”<br>  #include “key.h”<br>  #include “sys.h”<br>  #include “usart.h”<br>  #include “timer.h”<br>  #include “wave.h”</p>
</blockquote>
<blockquote>
<p>#define dir1 PBout(8)&#x2F;&#x2F; PB3<br>define dir2 PBout(9)&#x2F;&#x2F; PB4	</p>
</blockquote>
<p>接线：</p>
<p>9 –&gt; USB转ttl模块的RX</p>
<p>10 –&gt; USB转ttl模块的TX</p>
<p>5 –&gt;  TB6612模块PWMA</p>
<p>5 –&gt;  TB6612模块PWMA<br>6 –&gt;  电机黄色线（编码器A相）  B6 B7 对应TIM4的h1 ch2通道，每个通用定时器的ch1，ch2可作为正交解码&gt;  的输入</p>
<p>7 –&gt;  电机绿色线（编码器B相）</p>
<p>8 –&gt;  TB6612模块AIN2</p>
<p>9 –&gt;  TB6612模块AIN1</p>
<p>B6612模块STBY –&gt; 3.3v</p>
<p>B6612模块VM  –&gt; 电池（给电机供电）、B6612模块VCC  –&gt; 5v</p>
<blockquote>
<p>int Get_Speed(void);<br>int Motor_PID_Cal(int input_speed,int setspeed);<br>void pwm_output(void);<br>void dir_Init(void);</p>
</blockquote>
<blockquote>
<p>int set_speed &#x3D; 370; &#x2F;&#x2F;初始最大<br>int speed &#x3D; 0;<br>int raw_speed &#x3D; 0;</p>
</blockquote>
<blockquote>
<p>int8_t status &#x3D; 0;   &#x2F;&#x2F;0:停车  1：发车<br>int KP &#x3D; 50 ;<br>int KI &#x3D; 50  ;<br>int KD &#x3D; 8   ;<br>int PWM_OUT &#x3D; 0;</p>
</blockquote>
</li>
<li><p>定时器2中断服务程序(控制周期中断)，完成输出值的计算</p>
</li>
<li><p>Motor_PID_Cal(int input_speed,int setspeed) 函数中pwm限幅的操作（-1000&lt;pwmout&lt;1000）</p>
</li>
<li><p>dir_Init(void) 自定义GPIO，完成车轮旋转方向的控制</p>
</li>
<li><p>wave.c 文件中为与上位机发送数据的协议函数。上位机为匿名上位机，具体功能字可能改一下（匿名上位机在此的作用主要是pid的参数整定，后面的还有陀螺仪的调节也会用到）</p>
</li>
<li><p>调节pid参数时，一般调节<strong>KP、KI、KD</strong>三个全局变量即可</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>控制类算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python的函数</title>
    <url>/2022/09/25/python%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>Python中的函数是什么？</p>
<p>在Python中，function是一组执行特定任务的相关语句。</p>
<p>函数有助于将我们的程序分解为更小的模块化块。随着我们的计划越来越大，功能使其更加有条理和易于管理。</p>
<p>此外，它避免重复并使代码可重用</p>
<p>当然在python中，如果采用<strong>面向对象编程</strong>的思想，代码的复用率会更高，只不过将<strong>函数</strong>的叫法改为了<strong>方法</strong></p>
<h2 id="创建函数的语法"><a href="#创建函数的语法" class="headerlink" title="创建函数的语法"></a>创建函数的语法</h2><pre><code>def function_name(parameters):
    &quot;&quot;&quot;docstring&quot;&quot;&quot;
    statement(s)    
</code></pre>
<p>上面显示的是一个函数定义，它由以下组件组成。</p>
<p>关键字def标记函数头的开始。</p>
<p>用于唯一标识它的函数名称。函数命名遵循在Python中编写标识符的相同规则。</p>
<p>参数（参数），我们通过它将值传递给函数。它们是可选的。</p>
<p>冒号（:)标记函数头的结尾。</p>
<p>用于描述函数功能的可选文档字符串（docstring）。</p>
<p>构成函数体的一个或多个有效的python语句。语句必须具有相同的缩进级别（通常为4个空格）。</p>
<p>用于从函数返回值的可选return语句。</p>
<h3 id="函数描述（文档字符串）"><a href="#函数描述（文档字符串）" class="headerlink" title="函数描述（文档字符串）"></a>函数描述（文档字符串）</h3><p>函数头之后的第一个字符串称为docstring，是文档字符串的缩写。它用于简要解释函数的作用。</p>
<p>调用格式为 函数名._<em>doc</em>_</p>
<pre><code>&gt;&gt;print(greet.__doc__)
&gt;&gt; This function greets to
        the person passed in 
</code></pre>
<h3 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h3><p>此语句可以包含要求求值的表达式，并返回值。如果语句中没有表达式，或者函数内部不存在return语句本身，则该函数将返回None对象。</p>
<h3 id="变量的范围和寿命（变量的作用域）"><a href="#变量的范围和寿命（变量的作用域）" class="headerlink" title="变量的范围和寿命（变量的作用域）"></a>变量的范围和寿命（变量的作用域）</h3><p>变量的范围是程序中识别变量的部分。函数内定义的参数和变量在外部不可见。因此，它们具有局部范围。</p>
<p>变量的生命周期是变量在存储器中退出的时间段。函数内部变量的生命周期与函数执行的时间一样长。</p>
<p>一旦我们从函数返回它们就会被销毁。因此，函数不记得先前调用的变量值。</p>
<p>下面是一个示例，用于说明函数内部变量的范围。</p>
<pre><code>    def my_func():
        x = 10
        print(&quot;Value inside function:&quot;,x)

    x = 20
    my_func()
    print(&quot;Value outside function:&quot;,x)



    Value inside function: 10
    Value outside function: 20
</code></pre>
<p>在这里，我们可以看到x的值最初为20。即使函数my_func（）将x的值更改为10，它也不会影响函数外部的值。</p>
<p>这是因为函数内部的变量x与外部的变量x不同（函数的本地）。尽管它们具有相同的名称，但它们是两个具有不同范围的不同变量。</p>
<p>另一方面，函数外部的变量从内部可见。它们具有全局范围。</p>
<p>我们可以从函数内部读取这些值，但不能更改（写入）它们。为了修改函数外部变量的值，必须使用关键字global将它们声明为全局变量。</p>
<h3 id="输入函数中的参数个数未知的情况"><a href="#输入函数中的参数个数未知的情况" class="headerlink" title="输入函数中的参数个数未知的情况"></a>输入函数中的参数个数未知的情况</h3><p>可变长度参数主要有两种形式：在参数名前加1个星号*或2个星号**。 *parameter用来接收多个位置实参并将其放在元组中。 **parameter接收多个关键参数并存放到字典中。</p>
<pre><code>    def greet(*names):
    &quot;&quot;&quot;This function greets all
    the person in the names tuple.&quot;&quot;&quot;

    # names is a tuple with arguments
    for name in names:
        print(&quot;Hello&quot;,name)

    greet(&quot;Monica&quot;,&quot;Luke&quot;,&quot;Steve&quot;,&quot;John&quot;)
</code></pre>
<h2 id="回调函数-callback"><a href="#回调函数-callback" class="headerlink" title="回调函数 callback"></a>回调函数 callback</h2><p>把函数作为参数传递给另外一个函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外一方调用，用于对该事件或条件进行响应</p>
<p>回调函数就是一个被作为参数传递的函数</p>
<pre><code>    def calculator(v1,v2,fn):
        result = fn(v1,v2)
        return result

    def calculator(v1,v2,fn):
        result = fn(v1,v2)
        return result

    def Add(v1,v2):
        return v1+v2
</code></pre>
<p><strong>还有一种思考的角度，在程序执行到特定的情况下，在当前正在执行的函数内调用另外一个函数，利用调用的函数输出当前程序运行的情况</strong></p>
<h3 id="回调函数与递归函数的区别"><a href="#回调函数与递归函数的区别" class="headerlink" title="回调函数与递归函数的区别"></a>回调函数与递归函数的区别</h3><p>回调函数是在一个函数中“回调函数”以参数的形式传入，并在该函数内部被调用。</p>
<p>而递归函数是在一个函数中，调用了自己。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python的基础知识</title>
    <url>/2022/09/21/python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><strong>基于python3.10</strong></p>
<h2 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>属于python3的内置函数</p>
<p>print()方法用于打印输出，最常见的一个函数</p>
<p>在python3.3版增加lflush关键字参数</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>以下是print()方法的语法:</p>
<p>print(*objects, sep&#x3D;’ ‘, end&#x3D;’\n’, file&#x3D;sys.stdout, flush&#x3D;False)</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>objects – 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</li>
<li>sep – 用来间隔多个对象，默认值是一个空格。</li>
<li>end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串。</li>
<li>file – 要写入的文件对象。</li>
<li>flush – 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>无</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>&gt;&gt;&gt;print(1)  
1  
&gt;&gt;&gt; print(&quot;Hello World&quot;)  
Hello World  

&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = &#39;runoob&#39;
&gt;&gt;&gt; print(a,b)
1 runoob

&gt;&gt;&gt; print(&quot;aaa&quot;&quot;bbb&quot;)
aaabbb
&gt;&gt;&gt; print(&quot;aaa&quot;,&quot;bbb&quot;)
aaa bbb
&gt;&gt;&gt; 

&gt;&gt;&gt; print(&quot;www&quot;,&quot;runoob&quot;,&quot;com&quot;,sep=&quot;.&quot;)  # 设置间隔符
www.runoob.com
</code></pre>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>包的管理</p>
<p>未成功 ，因为python安装过程中出现了问题</p>
<p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装和卸载的功能，现在大家用到的所有包不是自带的就是通过pip安装的。Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p>
<h2 id="可以改变的变量与不可以改变的变量"><a href="#可以改变的变量与不可以改变的变量" class="headerlink" title="可以改变的变量与不可以改变的变量"></a>可以改变的变量与不可以改变的变量</h2><p>不可变的数据类型(3个):number(数字) string(字符串) Tuple(元组)</p>
<p>可变数据(3个):List(列表) Dictionary(字典) Set(集合)</p>
<h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><p>默认浮点数操作(除数运算)</p>
<p>只要有浮点数参与运算，结果一定也是浮点型</p>
<p>序列虽然内容相似，但是像运算的速度方面有很大的区别</p>
<h2 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h2><p><strong>左闭右开,访问序列</strong></p>
<p>[::c]c为步长  如果为负则倒叙</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的程序控制</title>
    <url>/2022/08/19/matlab%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>转载于CSDN博主「Smart_Devil」的原创文章<br>版权声明：本文为CSDN博主「Smart_Devil」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Smart_Devil/article/details/107347254">https://blog.csdn.net/Smart_Devil/article/details/107347254</a></p>
<span id="more"></span>
<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b3c43d3711.css">
                <div id="content_views" class="htmledit_views">
                    <p style="margin-left:0cm;">经过前几篇的学习，我想对于<a href="https://so.csdn.net/so/search?q=Matlab&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=Matlab&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;Matlab\&quot;}&quot;}" data-tit="Matlab" data-pretit="matlab">Matlab</a>的两种M文件都已经清楚各自的功能并对函数的相关知识有了一定的了解，今天这篇将对Matlab的程序控制结构进行学习，首先要知道在Matlab中，具有四类程序控制结构方式，依次是：条件控制、循环控制、误差控制和程序终止，接下来一一对其进行介绍。</p> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;"><strong><em>条件控制语句</em></strong></p> 
<p style="margin-left:0cm;">在编写程序时，会根据需要，使用不同的条件控制语句，可以是判断语句也可以是分支语句。</p> 
<p style="margin-left:0cm;"><strong><em>判断语句</em></strong></p> 
<p style="margin-left:0cm;">看到名字，我想你也已经猜到了一些东西，写过C或者其他相关程序的，都知道一种条件判断语句，也就是if语句，在Matlab中通常使用if-else-end分支结构，包含单分支、双分支和多分支3种形式，结构比较简单。</p> 
<p style="margin-left:0cm;">单分支如下：</p> 
<pre data-index="0"><code class="hljs language-crystal"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">if</span> 逻辑表达式</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">双分支：</p> 
<pre data-index="1"><code class="hljs language-crystal"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">if</span> 表达式</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">else</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">2</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">多分支：</p> 
<pre data-index="2"><code class="hljs language-crystal"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> 表达式<span class="hljs-number">2</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">2</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">else</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">3</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">以上3种分支结构实现都是一样，当逻辑表达式或者表达式为真时（逻辑表达式为非空数组、为非零变量、矩阵变量所有元素都非零都为真）则进入相应表达式下的执行代码块，然后结束；若为假，则进入下一级表达式判断，直至判断结束。</p> 
<p style="margin-left:0cm;"><strong><em>分支语句</em></strong></p> 
<p style="margin-left:0cm;">可能看到名字，你会有点陌生，但是看到switch后，你是否就恍然大悟了呢~</p> 
<p style="margin-left:0cm;">其结构：</p> 
<pre data-index="3" class="set-code-hide" name="code"><code class="hljs language-erlang"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">switch 表达式（标量或字符串）</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">case</span> value1</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">case</span> value2</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行代码块<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...............</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; otherwise</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 执行代码块N;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;">结构表达很简单，当表达式是一个标量时，就与相应的value进行比较，然后进入对应的执行代码块，例如和value1相等，就执行代码块1；和value2相等，就执行代码块2；如果所有的value都不与之相等，则进入otherwise执行相应的的代码块；如果表达式是一个字符串，也是一样的比较，只是MATLAB在比较时会自动调用strcmp函数，也就是字符串比较的函数，从而实现字符串的比较。</p> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;">接下来对switch语句做个简单使用：</p> 
<p style="margin-left:0cm;">程序：</p> 
<pre data-index="4" class="set-code-hide" name="code"><code class="hljs language-delphi"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">switch value</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">case</span> <span class="hljs-number">1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; disp(<span class="hljs-string">'1'</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">case</span> <span class="hljs-comment">&#123;2,3,4&#125;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; disep(<span class="hljs-string">'2 or 3 or 4'</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">case</span> <span class="hljs-number">5</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; disp(<span class="hljs-string">'5'</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">otherwise</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; disp(<span class="hljs-string">'Other number'</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">手动输入一个value的值，然后运行脚本进行判断结果的输出：</p> 
<p style="margin-left:0cm;"><img alt="" height="229" src="https://img-blog.csdnimg.cn/20200714205007781.png" width="221"></p> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;"><strong><em>循环控制语句</em></strong></p> 
<p style="margin-left:0cm;">相信大家对于循环语句就更熟悉了，for和while，我想写过程序的都用过；在MATLAB中的表达可能回和一些语言的表达形式不太一样，但是使用的效果一致，for的结构为：</p> 
<pre data-index="5"><code class="hljs language-crystal"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> 循环变量=开始值:增量:结束值</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 循环体</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">增量默认为1，可以设置为任何值，其他的使用与C或者相关语言的一致。</p> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;">演示下嵌套的使用</p> 
<p style="margin-left:0cm;">程序：</p> 
<pre data-index="6"><code class="hljs language-crystal"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> m=<span class="hljs-number">1</span>:<span class="hljs-number">3</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">for</span> n=<span class="hljs-number">1</span>:<span class="hljs-number">5</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A(m,n)=<span class="hljs-number">1</span>/(m+n-<span class="hljs-number">1</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">end</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;">分析：</p> 
<p style="margin-left:0cm;"><img alt="" height="141" src="https://img-blog.csdnimg.cn/20200714205007932.png" width="457"></p> 
<p style="margin-left:0cm;">第1、2行代表的就是建立一个3行5列的矩阵，第3行就是具体构建m行n列的矩阵并进行对应元素赋值操作。</p> 
<p style="margin-left:0cm;">结果：</p> 
<p style="margin-left:0cm;"><img alt="" height="237" src="https://img-blog.csdnimg.cn/20200714205007979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NtYXJ0X0Rldmls,size_16,color_FFFFFF,t_70" width="704"></p> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;">while语句是通过判断条件表达式的真假性，从而实现循环；</p> 
<p style="margin-left:0cm;">其结构为：</p> 
<pre data-index="7"><code class="hljs language-crystal"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">while</span> 条件表达式</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 循环体</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">直接演示一个程序：</p> 
<pre data-index="8"><code class="hljs language-ruby"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">n=<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">while</span> prod(<span class="hljs-number">1</span><span class="hljs-symbol">:n</span>)&lt;<span class="hljs-number">1e100</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; n=n+<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">结果：</p> 
<p style="margin-left:0cm;"><img alt="" height="198" src="https://img-blog.csdnimg.cn/20200714205007883.png" width="240"></p> 
<p style="margin-left:0cm;">这个程序的作用就是计算n!&lt;1e100的最大n值，其中的prod就是实现数组元素的乘积，当小于1e100的时候，n就进行累加，直至得到最大的n值。</p> 
<p style="margin-left:0cm;"><strong><em>误差控制语句</em></strong></p> 
<p style="margin-left:0cm;">我看到这个名字的第一眼，其实也是很懵逼的，为什么叫误差控制呢？然后学了之后就懂意思了，大概是这样的，类似条件判断语句，如果if的表达式不对，就进行下一个的判断或者直接运行else中的代码块，只是误差控制语句变成来try-catch-end的样子，具体结构：</p> 
<pre data-index="9"><code class="hljs language-erlang"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">try</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 程序代码块<span class="hljs-number">1</span>,<span class="hljs-comment">%总被执行，若正确，即跳出此结构</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">catch</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; 程序代码块<span class="hljs-number">2</span>,<span class="hljs-comment">%仅当程序代码块1出现错误，该代码块才被执行</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">如果程序代码块2也错了，则会终止运行的程序，若还有其他try-catch-end的语句，就会继续运行下一个try-catch-end，并且可以使用laster命令查看发生错误的原因（查看上一处错误），演示一段程序：</p> 
<pre data-index="10"><code class="hljs language-erlang"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">n=<span class="hljs-number">4</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">A=pascal(<span class="hljs-number">3</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">try</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">A_n=A(n,:),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">catch</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">A_end=A(<span class="hljs-keyword">end</span>,:),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">结果：</p> 
<p style="margin-left:0cm;"><img alt="" height="315" src="https://img-blog.csdnimg.cn/20200714205007957.png" width="244"></p> 
<p style="margin-left:0cm;">分析：使用pascal(3)构建了一个3x3的三角形矩阵，但是n=4，因此A_n=A(n,:)这一部分的代码相当于是错的，所以进入下一部分，即A_end=A(end,:)，然后将最后一行赋值并显示在窗口。</p> 
<p style="margin-left:0cm;"><span style="color:#FF0000;">注意：</span>try-catch-end语句中代码块是使用逗号隔开的，而不是分号！！！</p> 
<p style="margin-left:0cm;"><strong><em>程序终止语句</em></strong></p> 
<p style="margin-left:0cm;">在程序设计中通常需要提前终止循环、结束程序的运行、显示错误信息等情况，在MATLAB中，就具有continue、break、return、error等语句，接下来对其进行简单的介绍。</p> 
<p style="margin-left:0cm;">1、continue语句</p> 
<p style="margin-left:0cm;">该语句常用于循环控制中，使得当次的循环结束，继续下一次循环，并不是结束整个循环，直接做个演示：</p> 
<pre data-index="11" class="set-code-hide" name="code"><code class="hljs language-csharp"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">fid=fopen(<span class="hljs-string">'magic.m'</span>,<span class="hljs-string">'r'</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">count=<span class="hljs-number">0</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">while</span> ~feof(fid)%判断是否为文本的最后一行</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; line=fgetl(fid);%读取当前文本中当前行的下一行</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">isempty</span>(<span class="hljs-params">line</span>)|<span class="hljs-title">strncmp</span>(<span class="hljs-params">line,<span class="hljs-string">'%'</span>,<span class="hljs-number">1</span></span>)%判断是否是空行或者注释（判断%号即可）</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">continue</span>%若是空行或者注释就退出当次循环</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function">&nbsp;&nbsp;&nbsp; end</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function">&nbsp;&nbsp;&nbsp; count</span>=count+<span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function">end</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-title">disp</span>(<span class="hljs-params">sprintf(<span class="hljs-string">'%d lines'</span>,count</span>));</div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">结果，显示除去空行以及注释行后的代码行数，其中magic是系统内置的一个文件，可以直接在命令窗口行输入“open magic.m”打卡该文件进行结果的比对：</p> 
<p style="margin-left:0cm;"><img alt="" height="66" src="https://img-blog.csdnimg.cn/20200714205007660.png" width="211"></p> 
<p style="margin-left:0cm;">2、break语句</p> 
<p style="margin-left:0cm;">该语句虽然也是用于循环控制的，但是它的功能是直接中断当前的循环，不再执行该循环的任何操作，程序演示：</p> 
<pre data-index="12" class="set-code-hide" name="code"><code class="hljs language-delphi"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">fid=fopen(<span class="hljs-string">'fft.m'</span>,<span class="hljs-string">'r'</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">s=<span class="hljs-string">''</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">while</span> ~feof(fid)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; line=fgetl(fid);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; <span class="hljs-keyword">if</span> isempty(line),<span class="hljs-keyword">break</span>,<span class="hljs-keyword">end</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp; s=strvcat(s,line);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">end</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">disp(s)</div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="margin-left:0cm;">结果：</p> 
<p style="margin-left:0cm;"><img alt="" height="700" src="https://img-blog.csdnimg.cn/20200714205008361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NtYXJ0X0Rldmls,size_16,color_FFFFFF,t_70" width="1012"></p> 
<p style="margin-left:0cm;">分析：打开fft.m文件进行对比，会发现，在有空行时，就结束了文件内容的打印，关于文件的操作，会在之后的记录中出现，如果有不懂的地方，可以过段时间再来理解。</p> 
<p style="margin-left:0cm;">3、return语句</p> 
<p style="margin-left:0cm;">该语句就是将结束正在运行的函数，并且返回调用函数，一般是在函数的末尾正常结束函数的运行，也可以是在满足某种条件的时候强制结束函数运行并返回调用函数，这个就不做程序的演示了。</p> 
<p style="margin-left:0cm;">4、error语句</p> 
<p style="margin-left:0cm;">该语句理解更简单，就是直接终止当前函数的运行，并且显示出错信息，运行程序出错的时候那一串红色的字很醒目吧，那就是使用error产生的，当然warning就是使用warning语句了，使用语法：error('error message!!!')</p> 
<p style="margin-left:0cm;">结果：</p> 
<p style="margin-left:0cm;"><img alt="" height="85" src="https://img-blog.csdnimg.cn/20200714205007875.png" width="381"></p> 
<p style="margin-left:0cm;">&nbsp;</p> 
<p style="margin-left:0cm;">还有一些语句，因为时间关系就不做介绍了，不过都比较简单，有的在之前也有过介绍，剩下的可以自行使用帮助系统进行学习使用，有input、keyboard、pause...</p>
                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/Smart_Devil/article/details/107347254&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>
        </div>]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>创建博客的目的</title>
    <url>/2022/08/03/init/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>因为本身作者的学习的经历，所以学习和总结的知识比较的杂，比如说我可以写一些机构设计（3D建模）的内容，也可以写一些关于电路板设计的内容，最后比较难的<strong>嵌入式内容</strong></p>
<p>但是从自身的经历来说，贪多嚼不烂，后面主要分享的可能就是苦逼的写bug（bushi）的内容了。</p>
<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="stm32初级开发"><a href="#stm32初级开发" class="headerlink" title="stm32初级开发"></a>stm32初级开发</h3><ul>
<li>固件库开发</li>
<li>hal库</li>
<li>硬件仿真</li>
</ul>
<h3 id="msp430f5529初级开发"><a href="#msp430f5529初级开发" class="headerlink" title="msp430f5529初级开发"></a>msp430f5529初级开发</h3><ul>
<li>开发环境搭建</li>
<li>库函数开发实战</li>
</ul>
<h3 id="控制算法类"><a href="#控制算法类" class="headerlink" title="控制算法类"></a>控制算法类</h3><p>1.PID算法</p>
<ul>
<li>原理</li>
<li>工程应用</li>
</ul>
<h3 id="软件分享"><a href="#软件分享" class="headerlink" title="软件分享"></a>软件分享</h3><ul>
<li>嵌入式软件分享</li>
</ul>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>python的学习目录</title>
    <url>/2022/09/25/python%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="基础入门的知识"><a href="#基础入门的知识" class="headerlink" title="基础入门的知识"></a>基础入门的知识</h2><h3 id="1-python的基础知识"><a href="#1-python的基础知识" class="headerlink" title="1.python的基础知识"></a>1.python的基础知识</h3><ul>
<li>print函数</li>
</ul>
<h3 id="2-python的运算"><a href="#2-python的运算" class="headerlink" title="2.python的运算"></a>2.python的运算</h3><ul>
<li>python数据类型</li>
<li>python的数据类型转化</li>
<li>python的运算符与优先级</li>
</ul>
<h3 id="3-python的好用的技巧与默认的操作（还未写）"><a href="#3-python的好用的技巧与默认的操作（还未写）" class="headerlink" title="3.python的好用的技巧与默认的操作（还未写）"></a>3.python的好用的技巧与默认的操作（还未写）</h3><ul>
<li>format函数的用法</li>
</ul>
<h2 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h2><h3 id="1-python的函数"><a href="#1-python的函数" class="headerlink" title="1.python的函数"></a>1.python的函数</h3><h3 id="2-python的面向对象编程"><a href="#2-python的面向对象编程" class="headerlink" title="2.python的面向对象编程"></a>2.python的面向对象编程</h3><h3 id="3-python的模块与包（还未写）"><a href="#3-python的模块与包（还未写）" class="headerlink" title="3.python的模块与包（还未写）"></a>3.python的模块与包（还未写）</h3>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python的数据类型转化</title>
    <url>/2022/08/19/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b3c43d3711.css">
                <div id="content_views" class="htmledit_views">
                    <h2><a name="t0"></a>前提：</h2>
<p>list以及array是python中经常会用到的数据类型，当需要对list以及array进行文件的读写操作的时候，由于write函数参数需要的是一个str，所以这时就需要对list或者array进行str的转换了。</p>
<p>list和array的不同：</p>
<p>在进行转换之间先研究下python中list和array（<span style="color:#FF0000;">np.array</span>）的不同：</p>
<p>1、list是python中内置的数据类型，其中的数据的类型可以不相同，如java中List也可以不用相同的数据，但是为了格式的统一，就要用到泛型或者ArrayList。array中的数据类型必须是一样的。</p>
<p>2、list中保存的数据的存放地址，而不是数据，会增加内存的占用，所以存放数据还是尽量使用array。</p>
<p>3、list中有append的方法，可以进行追加，而array没有追加的方法，只能通过np.append来实现追加。</p>
<p>4、在print的时候，打印的结果不同。list元素之间有","分割，而array之间是空格。</p>
<pre data-index="0"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    arr = np.array(<span class="hljs-built_in">list</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(arr)</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<pre data-index="1"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<p><br></p>
<h2><a name="t1">
<span id="more"></span>
</a>1、list转换为str</h2>
<p>当list中存放的数据是<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;字符串\&quot;}&quot;}" data-tit="字符串" data-pretit="字符串">字符串</a>时，一般是通过str中的join函数进行转换：</p>
<pre data-index="2"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">list</span> = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str1 = <span class="hljs-string">''</span>.join(<span class="hljs-built_in">list</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str2 = <span class="hljs-string">' '</span>.join(<span class="hljs-built_in">list</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str3 = <span class="hljs-string">'.'</span>.join(<span class="hljs-built_in">list</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(str1)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(str2)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(str3)</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<pre data-index="3"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">abcd</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">a b c d</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">a.b.c.d</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<p>但是当list中存放的数据是整型数据或者数字的话，需要先将数据转换为字符串再进行转换：</p>
<pre data-index="4"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str1 = <span class="hljs-string">''</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str2 = <span class="hljs-string">' '</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str3 = <span class="hljs-string">'.'</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(str1)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(str2)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(str3)</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<pre data-index="5"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-number">1234</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h2><a name="t2"></a>2、array转换为str</h2>
<p>将array转换为str和list转换时是一样的，join()函数中的参数是一个iterator，所以array或者list都可以。</p>
<pre data-index="6"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">list</span> = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">arr = np.array(<span class="hljs-built_in">list</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">str</span> = <span class="hljs-string">''</span>.join(arr)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<pre data-index="7"><code class="language-python hljs">abcd</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h2><a name="t3"></a>3、str转换为list</h2>
<p>在将str转化为list时，主要就是通过str的split()函数，split()参数为空时，默认以空格来做分割。</p>
<p>直接通过list转换时是以每一个字符为分割的。<br></p>
<pre data-index="8"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str1 = <span class="hljs-string">'abcde'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str2 = <span class="hljs-string">'a b c d   e'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">str3 = <span class="hljs-string">'a, b, c, d, e'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">result1 = <span class="hljs-built_in">list</span>(str1)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">result2 = str2.split()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">result3 = str3.split(<span class="hljs-string">', '</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(result1)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(result2)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(result3)</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<pre data-index="9"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<br>
<br>
<p></p>
<p><br></p>
                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/FrankieHello/article/details/80766439&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>
        </div>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python的数据类型</title>
    <url>/2022/08/20/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>python中有6个标准的数据类型:</p>
<ul>
<li>Number (数字)</li>
<li>String (字符串)</li>
<li>List   (列表)</li>
<li>Tuple  (元组)</li>
<li>set    (集合)</li>
<li>Dictionary (字典)<span id="more"></span></li>
</ul>
<h2 id="一、Number-（数字）"><a href="#一、Number-（数字）" class="headerlink" title="一、Number （数字）"></a>一、Number （数字）</h2><h3 id="python-支持三种数值类型："><a href="#python-支持三种数值类型：" class="headerlink" title="python 支持三种数值类型："></a>python 支持三种数值类型：</h3><p>整型(int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 long 类型。布尔(bool)是整型的子类型。</p>
<p>浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 &#x3D; 2.5 x 102 &#x3D; 250）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</span><br><span class="line"></span><br><span class="line">在Python中定义整数的大小没有限制，可以是一个无限大的整数，比如：</span><br><span class="line">a = 123456789123456789</span><br><span class="line"></span><br><span class="line">如果数字的长度过长时，可以使用下划线作为分隔符，比如：</span><br><span class="line">a = 123_345_789_123_456_789</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其他进制的整数：</span><br><span class="line">十进制：不能以0开头</span><br><span class="line">二进制：以0b开头</span><br><span class="line">八进制：以0o开头</span><br><span class="line">十六进制：以0x开头</span><br><span class="line">但是注意，所有以其他进制定义的整数，输出结果均为十进制</span><br></pre></td></tr></table></figure>
<h3 id="python-数字类型转换"><a href="#python-数字类型转换" class="headerlink" title="python 数字类型转换"></a>python 数字类型转换</h3><p><strong>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</strong></p>
<p>int(x) 将x转换为一个整数。</p>
<p>float(x) 将x转换到一个浮点数。</p>
<p>complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。</p>
<p>complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。</p>
<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><p>字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 “ )来创建字符串。</p>
<p>创建字符串很简单，只要为变量分配一个值即可。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var1 = &#x27;Hello World!&#x27;</span><br></pre></td></tr></table></figure>

<hr>
<p>以下为上课时的积累<br>python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</p>
<p>在python中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中的对象的类型。</p>
<p>不可变的数据类型(3个):number(数字) string(字符串) Tuple(元组)</p>
<p>可变数据(3个):List(列表) Dictionary(字典) Set(集合)</p>
<h3 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h3><p>Python3 支持 int、float、bool、complex（复数）。</p>
<p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p>
<p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p>
<p>内置的 type() 函数可以用来查询变量所指的对象类型。</p>
<p>“关键在于每个变量定义的时候，使用的情况是什么，是小括号还是中括号还是花括号”</p>
<p>Python3 支持 int、float、bool、complex（复数）。</p>
<p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long</p>
<p>此外还可以用 isinstance 来判断</p>
<p>实例</p>
<pre><code>&gt;&gt;&gt; a = 111
&gt;&gt;&gt; isinstance(a, int)
True
&gt;&gt;&gt;
</code></pre>
<p>isinstance 和 type 的区别在于：</p>
<ul>
<li><p>type()不会认为子类是一种父类类型。</p>
</li>
<li><p>isinstance()会认为子类是一种父类类型</p>
</li>
</ul>
<p>注意：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True&#x3D;&#x3D;1、False&#x3D;&#x3D;0 会返回 True，但可以通过 is 来判断类型。</p>
<p>您可以通过使用del语句删除单个或多个对象。例如：</p>
<p>del var</p>
<p>del var_a, var_b</p>
<p>注意:</p>
<ul>
<li>1、Python可以同时为多个变量赋值，如a, b &#x3D; 1, 2。</li>
<li>2、一个变量可以通过赋值指向不同类型的对象。</li>
<li>3、数值的除法包含两个运算符：&#x2F; 返回一个浮点数，&#x2F;&#x2F; 返回一 个整数。</li>
<li>4、在混合计算时，Python会把整型转换成为浮点数。</li>
</ul>
<p>数值类型实例</p>
<p>int	   float	   complex<br>10	    0.0	        3.14j<br>100	    15.20	    45.j<br>-786	-21.9	  9.322e-36j<br>080	   32.3e+      18.876j<br>-0490	-90.      -.6545+0J<br>-0x260	-32.54e100	3e+26J<br>0x69	70.2E-12	4.53e-7j</p>
<p>string(字符串)<br>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。</p>
<p>字符串的截取的语法格式如下：</p>
<p>变量[头下标:尾下标]</p>
<p>六种数据类型的定义；</p>
<ul>
<li><p>number<br>var1 &#x3D; 1<br>var2 &#x3D; 10</p>
</li>
<li><p>String<br>  var1 &#x3D; ‘Hello World!’<br>  var2 &#x3D; “Runoob”</p>
</li>
<li><p>list</p>
</li>
</ul>
<p><strong>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</strong></p>
<pre><code>list1 = [&#39;Google&#39;, &#39;Runoob&#39;, 1997, 2000]
list2 = [1, 2, 3, 4, 5 ]
list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
list4 = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;white&#39;, &#39;black&#39;]
</code></pre>
<h2 id="列表-list-的内置方法"><a href="#列表-list-的内置方法" class="headerlink" title="列表(list)的内置方法"></a>列表(list)的内置方法</h2><p>序号	方法<br>1	list.append(obj)  在列表末尾添加新的对象<br>2	list.count(obj)统计某个元素在列表中出现的次数<br>3	list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）<br>4	list.index(obj) 从列表中找出某个值第一个匹配项的索引位置<br>5	list.insert(index, obj)将对象插入列表<br>6	list.pop([index&#x3D;-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值<br>7	list.remove(obj)移除列表中某个值的第一个匹配项<br>8	list.reverse()反向列表中元素<br>9	list.sort( key&#x3D;None, reverse&#x3D;False)对原列表进行排序<br>10	list.clear()清空列表<br>11	list.copy()复制列表</p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p><strong>主要用于像图像识别过程中，语言表述与计算机可以识别数字图像矩阵数据直接的联系</strong><br><strong>数据量较大时，可以较好的描述一个数据</strong></p>
<p>每个元素的键(key)和值(value)用冒号分隔  元素之间用逗号分隔</p>
<p>大括号</p>
<p>字典中的键 可以为 任意不变的值 相当于实际字典中的页码  </p>
<p>页码对应着一片内容，内容可变，页码不能变</p>
<p>键可以为任意不可变的数据</p>
<h3 id="字典元素的遍历"><a href="#字典元素的遍历" class="headerlink" title="字典元素的遍历"></a>字典元素的遍历</h3><p>print(storyCount.keys())</p>
<h1 id="return-values-in-dictionary"><a href="#return-values-in-dictionary" class="headerlink" title="return values in dictionary"></a>return values in dictionary</h1><p>print(storyCount.values())<br>        dict_keys([‘is’, ‘Michael’, ‘runs’])<br>        dict_values([100, 12, 5])</p>
<p>一般访问的时候就是用[]</p>
<p>dictionary   {}<br>list         []<br>set          {}<br>tuple        ()</p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合是无序、可变的序列 使用<strong>大括号（）</strong><br>元素不可重复  </p>
<p>只能包含 数字 字符串 元素等不可变类型的数据  <strong>最类似于c语言数组的序列</strong></p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python的面向对象编程</title>
    <url>/2022/09/21/python%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="python3-面向对象"><a href="#python3-面向对象" class="headerlink" title="python3 面向对象"></a>python3 面向对象</h2><p>OO&#x3D;Object Oriented(面向对象)</p>
<p>封装 将功能进行实现，不过不展示原理</p>
<p>继承</p>
<p>多态：<br>   每个学生都有自己的成绩，但是每个学生的成绩不一定相同  </p>
<p>补充：对基类方法的覆盖和重写</p>
<p>简化代码，实现代码的复用</p>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>对象属性： 数据成员  变量<br>对象行为： 成员方法  函数</p>
<p>类名的首字母要大写</p>
<p>Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。</p>
<p>如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。</p>
<p>接下来我们先来简单的了解下面向对象的一些基本特征。</p>
<p>实例(python 3.0+)</p>
<p>#!&#x2F;usr&#x2F;bin&#x2F;python3</p>
<p>class MyClass:</p>
<pre><code>&quot;&quot;&quot;一个简单的类实例&quot;&quot;&quot;

i = 12345

def f(self):

    return &#39;hello world&#39;
</code></pre>
<h1 id="实例化类"><a href="#实例化类" class="headerlink" title="实例化类"></a>实例化类</h1><p>x &#x3D; MyClass()</p>
<h1 id="访问类的属性和方法"><a href="#访问类的属性和方法" class="headerlink" title="访问类的属性和方法"></a>访问类的属性和方法</h1><p>print(“MyClass 类的属性 i 为：”, x.i)</p>
<p>print(“MyClass 类的方法 f 输出为：”, x.f())</p>
<p>以上创建了一个新的类实例并将该对象赋给局部变量 x，x 为空的对象。</p>
<p>执行以上程序输出结果为：</p>
<p>MyClass 类的属性 i 为： 12345</p>
<p>MyClass 类的方法 f 输出为： hello world</p>
<p>类有一个名为 <strong>init</strong>() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样：</p>
<p>def <strong>init</strong>(self):</p>
<pre><code>self.data = []
</code></pre>
<p>类定义了 <strong>init</strong>() 方法，类的实例化操作会自动调用 <strong>init</strong>() 方法。如下实例化类 MyClass，对应的 <strong>init</strong>() 方法就会被调用:</p>
<p>x &#x3D; MyClass()</p>
<p>当然， <strong>init</strong>() 方法可以有参数，参数通过 <strong>init</strong>() 传递到类的实例化操作上。例如:</p>
<p>实例(Python 3.0+)</p>
<p>#!&#x2F;usr&#x2F;bin&#x2F;python3</p>
<p>class Complex:</p>
<pre><code>def __init__(self, realpart, imagpart):
    
    self.r = realpart
    
    self.i = imagpart
</code></pre>
<p>x &#x3D; Complex(3.0, -4.5)</p>
<p>print(x.r, x.i)   # 输出结果：3.0 -4.5</p>
<p>面向对象   类 class  合理的定义和组织这些类以及类之间的关系    </p>
<p>算法  数据结构</p>
<p>补充 ：函数式编程  FP<br>      多层函数的嵌套调用  </p>
<p>高版本肯定兼容低版本，但是高版本的代码在低版本中可能运行      </p>
<p>课堂上的内容：</p>
<p> 类中的构造函数<br>                 两个下划线   self<br>  class Dog:</p>
<pre><code># Initializer / Instance Attributes
def __init__(self, name, age):  
    self.name = name
    self.age = age
</code></pre>
<p>想一想面向过程的编程为什么会转向面向对象编程</p>
<p>共性：<br>  类属性<br>   虽然实例属性特定于每个对象，但类属性对于所有实例都是相同的 - 在这种情况下，属性都来自狗。</p>
<p>个性：<br>  实例属性<br>   狗的年龄和名字是不同的</p>
<p>疑问，类的作用之于函数有何区别</p>
<p>python 内部 一切皆对象  封装的方法   封装的太全了  struct  封装的对象</p>
<p>类似于集合体中，改变一个区域，则其余所有的值都会改变</p>
<p>Car.price &#x3D; 110000                     #修改类属性</p>
<p>对类的修改：<br>Car.name &#x3D; ‘QQ’                        #动态增加类属性</p>
<p>car1.color &#x3D; “Yellow”                  #修改实例属性</p>
<p>动态增加方法:<br>import types</p>
<p>def setSpeed(self, s):<br>    self.speed &#x3D; s</p>
<p>car1.setSpeed &#x3D; types.MethodType(setSpeed, car1) #动态增加成员方法<br>car1.setSpeed(50)                                #调用成员方法<br>print(car1.speed)</p>
<p>类中的方法： </p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32学习的踩坑之路</title>
    <url>/2022/08/07/stm32%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>这篇文章主要记录我学习stm32过程中所踩过的坑</p>
<span id="more"></span>

<h2 id="GPIO的调试"><a href="#GPIO的调试" class="headerlink" title="GPIO的调试"></a>GPIO的调试</h2><p>1.没开时钟</p>
<p>2.端口映射的问题</p>
<ul>
<li>pwm生成后的端口映射没开</li>
<li>端口映射影响原来的端口</li>
</ul>
<p>3.据说ZET6相对RCT6出现端口冲突的概率比较大（玄学问题）</p>
<h2 id="中断系统-NVIC"><a href="#中断系统-NVIC" class="headerlink" title="中断系统(NVIC)"></a>中断系统(NVIC)</h2><p>一般没出现问题，优先级注意一下就可以</p>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ul>
<li>分清定时器的类别：高级定时器、通用定时器、基本定时器</li>
<li>定时器挂在那个总线上注意一下就可以</li>
<li>计算定时时间时注意，自动装载值为计数到这个值就会溢出，这点和51单片机不同</li>
</ul>
<h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><ul>
<li>串口的工作模式：阻塞、中断、DMA。 常用中断方式，比较熟悉</li>
<li>串口的中断标志位需要记一下，以及那些中断标志位在中断处理函数中需要清除</li>
</ul>
<hr>
<p><strong>以下是调试具体模块时的经验</strong></p>
<hr>
<h2 id="舵机"><a href="#舵机" class="headerlink" title="舵机"></a>舵机</h2><ul>
<li>单片机和舵机的电源不能是同一个（如果你用的是51单片机除外）</li>
<li>使用双电源千万要记得共地</li>
<li>一般舵机不转有两大原因<ul>
<li>占空比计算有误</li>
<li>给舵机的电源过高</li>
</ul>
</li>
</ul>
<h2 id="蓝牙模块"><a href="#蓝牙模块" class="headerlink" title="蓝牙模块"></a>蓝牙模块</h2><ul>
<li>单片机串口的工作模式尽量选择中断</li>
<li>注意调用的库函数名字（其实就是串口工作方式的选择）</li>
<li>蓝牙模块的波特率要和mcu的波特率相同</li>
</ul>
<h2 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h2><ul>
<li>gpio输出的频率过高，蜂鸣器不响</li>
</ul>
<h2 id="小车-通常调模块遇到的问题"><a href="#小车-通常调模块遇到的问题" class="headerlink" title="小车||通常调模块遇到的问题"></a>小车||通常调模块遇到的问题</h2><ul>
<li>1.电源电压过低（oled模块、超声波模块）</li>
<li>解决办法:<u>尽量不要使用开发板上的电源接口，并联分流，虽然电压达到要求，但是电流过小会导致模块无法正常工作</u></li>
<li>2.接触不良</li>
<li>解决办法:<u>骂一遍垃圾杜邦线，换一条新的杜邦线，这东西是消耗品，多买一点没问题的</u></li>
<li>3.固件库没加入工程导致报错</li>
<li>解决办法:<u>这个还好，有报错，出错之后骂一遍自己是傻逼，然后改回来就好</u></li>
<li>4.未初始化</li>
<li>解决办法:<u>同上，不过要深刻的骂自己，因为这个错误编译器不会报错</u></li>
<li>5.时钟配置错误，大部分是时钟总线选错了</li>
<li>解决办法:<u>同上</u></li>
<li>6.引脚接错</li>
<li>解决办法:<u>同上，不过应该是最需要深刻反省自己的。接错信号线只是浪费你自己的时间，如果接错了电源线，那么你会闻到麦芽的香气…</u></li>
</ul>
]]></content>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab的GUI设计</title>
    <url>/2022/09/23/matlab%E7%9A%84gui%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>GUI</strong>可以简单理解为用户可以交互的一个窗口，方便用户进行使用。</p>
<p>一般的不熟悉开发的人会把<strong>GUI</strong>想象的比较厉害，但是作者认为任何的<strong>GUI</strong>的设计都是建立在程序底层的已经开发的十分完备的情况下。如果先进行<strong>GUI</strong>的开发，下面的一些数据的处理，以及一些数据的读取都没有写好的情况下，你的系统的设计后面肯定是失败的</p>
<span id="more"></span>

<h2 id="图形句柄"><a href="#图形句柄" class="headerlink" title="图形句柄"></a>图形句柄</h2><p>一个图形窗口是由不同的对象（如坐标轴、曲线、曲面或文字等）组成的图形界面  </p>
<p>matlab会给每个图形对象分配一个标识符，称为勺柄。后面可以通过句柄对该对象的属性进行设置</p>
<p>每个对象</p>
]]></content>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>python的运算符与优先级</title>
    <url>/2022/09/21/python%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>版权声明：本文为CSDN博主「枫 宸」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p>
<p>原文链接：<a href="https://blog.csdn.net/weixin_61693556/article/details/122500410">https://blog.csdn.net/weixin_61693556/article/details/122500410</a></p>
<span id="more"></span>
<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b3c43d3711.css">
                <div id="content_views" class="markdown_views prism-atom-one-dark">
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <p></p>
<div class="toc">
 <h3><a name="t0"></a>文章目录</h3>
 <ul><li><a href="#Python_1" target="_self">一、Python算数运算符</a></li><li><a href="#Python_49" target="_self">二、Python比较运算符</a></li><li><a href="#Python_106" target="_self">三、Python赋值运算符</a></li><li><a href="#Python_150" target="_self">四、Python位运算符</a></li><li><a href="#Python_193" target="_self">五、Python逻辑运算符</a></li><li><a href="#Python_235" target="_self">六、Python成员运算符</a></li><li><a href="#Python_267" target="_self">七、Python身份运算符</a></li><li><a href="#Python_303" target="_self">八、Python运算符的优先级</a></li></ul>
</div>
<p></p> 
<h1><a name="t1"></a><a id="Python_1"></a>一、Python算数<a href="https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E7%AC%A6&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E7%AC%A6&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;运算符\&quot;}&quot;}" data-tit="运算符" data-pretit="运算符">运算符</a></h1> 
<blockquote> 
 <p>以下假设变量：a = 10 ，b = 20</p> 
</blockquote> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加（两个对象相加）</td><td>a+b输出结果为30</td></tr><tr><td>-</td><td>减（得到负数或是一个数减去另一个数）</td><td>a-b输出结果为-10</td></tr><tr><td>*</td><td>乘（两个数相乘或是返回一个被重复若干次的字符串）</td><td>a*b输出结果为200</td></tr><tr><td>/</td><td>除（x除以y）</td><td>b/a输出结果为2</td></tr><tr><td>%</td><td>取模（返回除法的余数）</td><td>b%a输出结果为0</td></tr><tr><td>**</td><td>幂（返回x的y次幂）</td><td>a**b为10的20次方</td></tr><tr><td>//</td><td>取整除（返回商的整数部分-向下取整）</td><td>9//2 输出结果为4 -9//4 输出结果为-5</td></tr></tbody></table></div>
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="0" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">21</span>
b <span class="token operator">=</span> <span class="token number">10</span>
c <span class="token operator">=</span> <span class="token number">0</span>

<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">+</span> b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“1 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">-</span> b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“2 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">*</span> b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“3 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> </p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">&#x2F;</span> b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“4 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> </p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">%</span> b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“5 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p><span class="token comment"># 修改变量 a 、b 、c</span><br>a <span class="token operator">&#x3D;</span> <span class="token number">2</span><br>b <span class="token operator">&#x3D;</span> <span class="token number">3</span><br>c <span class="token operator">&#x3D;</span> a<span class="token operator">**</span>b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“6 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>a <span class="token operator">&#x3D;</span> <span class="token number">10</span><br>b <span class="token operator">&#x3D;</span> <span class="token number">5</span><br>c <span class="token operator">&#x3D;</span> a<span class="token operator">&#x2F;&#x2F;</span>b<br><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">“7 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/1533edd461ee4380b604e57dd68a5d04.png" alt="运行结果"></p> 
<h1><a name="t2"></a><a id="Python_49"></a>二、Python比较运算符</h1> 
<blockquote> 
 <p>以下假设变量：a = 10 ，b = 20</p> 
</blockquote> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于（比较两个对象是否相等）</td><td>(a == b)返回False</td></tr><tr><td>!=</td><td>不等于（比较两个对象是否不相等）</td><td>(a != b)返回True</td></tr><tr><td>&gt;</td><td>大于（返回x是否大于y）</td><td>(a &gt; b)返回False</td></tr><tr><td>&lt;</td><td>小于（返回x是否小于y）</td><td>(a &lt; b)返回True</td></tr><tr><td>&gt;=</td><td>大于等于（返回x是否大于等于y）</td><td>(a &gt;= b)返回False</td></tr><tr><td>&lt;=</td><td>小于等于（返回x是否小于等于y）</td><td>(a &lt;= b)返回True</td></tr></tbody></table></div>
<p>所有比较运算符返回 1 表示真，返回 0 表示假。<br> 这分别与特殊的变量 True 和 False 等价（注意这些变量名的大小写）。</p> 
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="1" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">21</span>
b <span class="token operator">=</span> <span class="token number">10</span>
c <span class="token operator">=</span> <span class="token number">0</span>
 
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&#x3D;&#x3D;</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - a 等于 b”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - a 不等于 b”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">!&#x3D;</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - a 不等于 b”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - a 等于 b”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - a 小于 b”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - a 大于等于 b”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - a 大于 b”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - a 小于等于 b”</span><span class="token punctuation">)</span></p>
<p><span class="token comment"># 修改变量 a 和 b 的值</span><br>a <span class="token operator">&#x3D;</span> <span class="token number">5</span><span class="token punctuation">;</span><br>b <span class="token operator">&#x3D;</span> <span class="token number">20</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;&#x3D;</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“5 - a 小于等于 b”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“5 - a 大于  b”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token operator">&gt;&#x3D;</span> a <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“6 - b 大于等于 a”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“6 - b 小于 a”</span><span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/93c0f67db58343d38d881baa1d889f55.png" alt="运行结果"></p> 
<h1><a name="t3"></a><a id="Python_106"></a>三、Python赋值运算符</h1> 
<blockquote> 
 <p>以下假设变量：a = 10 ，b = 20</p> 
</blockquote> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值给c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td>//=</td><td>取整赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table></div>
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="2" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">21</span>
b <span class="token operator">=</span> <span class="token number">10</span>
c <span class="token operator">=</span> <span class="token number">0</span>
 
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">+</span> b<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">+&#x3D;</span> a<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">*&#x3D;</span> a<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x2F;&#x3D;</span> a<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> <span class="token number">2</span><br>c <span class="token operator">%&#x3D;</span> a<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“5 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">**&#x3D;</span> a<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“6 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x2F;&#x2F;&#x3D;</span> a<br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“7 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/4bbbb5a581734c41b22b97e945fccae4.png" alt="运行结果"></p> 
<h1><a name="t4"></a><a id="Python_150"></a>四、Python<a href="https://so.csdn.net/so/search?q=%E4%BD%8D%E8%BF%90%E7%AE%97&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E4%BD%8D%E8%BF%90%E7%AE%97&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;位运算\&quot;}&quot;}" data-tit="位运算" data-pretit="位运算">位运算</a>符</h1> 
<p><strong>按位运算符</strong>是把数字看做二进制来进行计算的。</p> 
<blockquote> 
 <p><strong>a = 60，b = 13</strong>其二进制格式如下：<br> a = 0011 1100<br> b = 0000 1101</p> 
</blockquote> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0</td><td>(a &amp; b)输出结果为 12 ，二进制解释：0000 1100</td></tr><tr><td>|</td><td>按位或运算符：参与运算的两个值，只要对应的两个二进位有一个为1，结果位就为1</td><td>(a | b)输出结果为 61 ，二进制解释：0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td><td>(a ^ b)输出结果为 49 ，二进制解释：0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反，即把1变为0，把0变为1。 ~x 类似于 -x-1</td><td>(~a)输出结果为 -61 ，二进制解释：1100 0011</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由“&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0</td><td>a &lt;&lt; 2 输出结果为 240 ，二进制解释：1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把“&gt;&gt;”左边的运算数的各二进位全部右移若干位，“&gt;&gt;”右边的数指定移动的位数</td><td>a &gt;&gt; 2 输出结果为 15 ，二进制解释：0000 1111</td></tr></tbody></table></div>
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="3" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">60</span>            <span class="token comment"># 60 = 0011 1100 </span>
b <span class="token operator">=</span> <span class="token number">13</span>            <span class="token comment"># 13 = 0000 1101 </span>
c <span class="token operator">=</span> <span class="token number">0</span>
 
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>        <span class="token comment"># 12 &#x3D; 0000 1100</span><br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>        <span class="token comment"># 61 &#x3D; 0011 1101 </span><br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token comment"># 49 &#x3D; 0011 0001</span><br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>           <span class="token comment"># -61 &#x3D; 1100 0011</span><br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment"># 240 &#x3D; 1111 0000</span><br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“5 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<p>c <span class="token operator">&#x3D;</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment"># 15 &#x3D; 0000 1111</span><br><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“6 - c 的值为：”</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/2ac6eb2525ba409a85241884cc7859e9.png" alt="运行结果"></p> 
<h1><a name="t5"></a><a id="Python_193"></a>五、Python逻辑运算符</h1> 
<blockquote> 
 <p>以下假设变量：a = 10 ，b = 20</p> 
</blockquote> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔“与”（如果 x 为 False ，x and y 返回 False ，否则返回 y 的计算值）</td><td>(a and b)返回20</td></tr><tr><td>or</td><td>x or y</td><td>布尔“或”（如果 x 是 True ，则返回 x 的值，否则返回 y 的计算值）</td><td>(a or b)返回10</td></tr><tr><td>not</td><td>not x</td><td>布尔“非”（如果 x 为 True ，则返回 False 。如果 x 为 False ，则返回 True ）</td><td>not(a and b)返回 False</td></tr></tbody></table></div>
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="4" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">20</span>
 
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">and</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - 变量 a 和 b 都为 true”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - 变量 a 和 b 有一个不为 true”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">or</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - 变量 a 和 b 都为 true，或其中一个变量为 true”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - 变量 a 和 b 都不为 true”</span><span class="token punctuation">)</span></p>
<p><span class="token comment"># 修改变量 a 的值</span><br>a <span class="token operator">&#x3D;</span> <span class="token number">0</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">and</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - 变量 a 和 b 都为 true”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - 变量 a 和 b 有一个不为 true”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">or</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - 变量 a 和 b 都为 true，或其中一个变量为 true”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - 变量 a 和 b 都不为 true”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span> a <span class="token keyword">and</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“5 - 变量 a 和 b 都为 false，或其中一个变量为 false”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“5 - 变量 a 和 b 都为 true”</span><span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/70c83099bce84da8a9e487744b4d9c93.png" alt="运行结果"></p> 
<h1><a name="t6"></a><a id="Python_235"></a>六、Python成员运算符</h1> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True ，否则返回 False</td><td>x 在序列 y 中，如果 x 在 y 序列中返回 True</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True ，否则返回 False</td><td>x 不在序列 y 中，如果 x 不在 y 序列中返回 True</td></tr></tbody></table></div>
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="5" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">20</span>
<span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - 变量 a 在给定的列表中 list 中”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - 变量 a 不在给定的列表中 list 中”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - 变量 b 不在给定的列表中 list 中”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - 变量 b 在给定的列表中 list 中”</span><span class="token punctuation">)</span></p>
<p><span class="token comment"># 修改变量 a 的值</span><br>a <span class="token operator">&#x3D;</span> <span class="token number">2</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - 变量 a 在给定的列表中 list 中”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - 变量 a 不在给定的列表中 list 中”</span><span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/92c066830fdc42389dccad781c3bf943.png" alt="运行结果"></p> 
<h1><a name="t7"></a><a id="Python_267"></a>七、Python身份运算符</h1> 
<p><strong>身份运算符</strong>用于比较两个对象的存储单元</p> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td>x is y ，类似 id(x) == id(y) ，如果引用的是同一个对象，则返回 True ，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td>x is not y ，类似 id(x) != id(y) ，如果引用的不是同一个对象，则返回 True ，否则返回 False</td></tr></tbody></table></div>
<p><strong>下面是Python代码：</strong></p> 
<pre data-index="6" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> <span class="token number">20</span>
b <span class="token operator">=</span> <span class="token number">20</span>
 
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">is</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - a 和 b 有相同的标识”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“1 - a 和 b 没有相同的标识”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&#x3D;&#x3D;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - a 和 b 有相同的标识”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“2 - a 和 b 没有相同的标识”</span><span class="token punctuation">)</span></p>
<p><span class="token comment"># 修改变量 b 的值</span><br>b <span class="token operator">&#x3D;</span> <span class="token number">30</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">is</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - a 和 b 有相同的标识”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“3 - a 和 b 没有相同的标识”</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">is</span> <span class="token keyword">not</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - a 和 b 没有相同的标识”</span><span class="token punctuation">)</span><br><span class="token keyword">else</span><span class="token punctuation">:</span><br>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">“4 - a 和 b 有相同的标识”</span><span class="token punctuation">)</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li></ul></pre> 
<p><strong>运行结果：</strong><br> <img src="https://img-blog.csdnimg.cn/e9a44fbb2c1f47f2b3bbb8a8cc258137.png" alt="运行结果"></p> 
<h1><a name="t8"></a><a id="Python_303"></a>八、Python运算符的<a href="https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;优先级\&quot;}&quot;}" data-tit="优先级" data-pretit="优先级">优先级</a></h1> 
<div class="table-box"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数（最高优先级）</td></tr><tr><td>~ + -</td><td>按位翻转，一元加号和减号（最后两个的方法名为 +@ 和 -@）</td></tr><tr><td>* / % //</td><td>乘、除、取模和取整数</td></tr><tr><td>+ -</td><td>加法 减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移、左移运算符</td></tr><tr><td>&amp;</td><td>位’AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table></div>
                </div><div><div></div></div>
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-22a2fefd3b.css" rel="stylesheet">
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-4f8fbf9108.css" rel="stylesheet">
        </div>


]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl的入门</title>
    <url>/2022/08/21/wsl%E7%9A%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>print函数</title>
    <url>/2022/09/25/print%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b3c43d3711.css">
                <div id="content_views" class="htmledit_views">
                    <p style="text-indent:50px;">&nbsp;<strong>python版本：python3.5.1 ; IDE：pycharm2017.2</strong></p> 
<p id="main-toc"><strong>目录</strong></p> 
<p id="" style="margin: 0px 0px 2px; padding-left: 24px;"><a href="#t0" target="_self">一、print()函数概述</a></p> 
<p id="" style="margin: 0px 0px 2px; padding-left: 24px;"><a href="#t1" target="_self">二、变量的输出</a></p> 
<p id="" style="margin: 0px 0px 2px; padding-left: 24px;"><a href="#t2" target="_self">三、数据的格式化输出</a></p> 
<p id="" style="margin: 0px 0px 2px 48px; padding-left: 24px;"><a href="#t3" target="_self">3.1 %字符</a></p> 
<p id="" style="margin: 0px 0px 2px 48px; padding-left: 24px;"><a href="#t4" target="_self">3.2&nbsp;最小字段宽度和精度</a></p> 
<p id="" style="margin: 0px 0px 2px 48px; padding-left: 24px;"><a href="#t5" target="_self">3.3&nbsp;转换标志</a></p> 
<p id="" style="margin: 0px 0px 2px 48px; padding-left: 24px;"><a href="#t6" target="_self">3.4&nbsp;格式字符归纳</a></p> 
<p id="" style="margin: 0px 0px 2px; padding-left: 24px;"><a href="#t7" target="_self">四、换行与防止换行</a></p> 
<hr id="hr-toc">
<h1 id="%E4%B8%80.print()%E5%87%BD%E6%95%B0%E6%A6%82%E8%BF%B0"><a name="t0"></a><strong>一、print()函数概述</strong></h1> 
<p style="text-indent:50px;"><strong>print()</strong>&nbsp;方法用于打印输出，是python中最常见的一个函数。</p> 
<p style="text-indent:50px;">该函数的语法如下：</p> 
<pre class="has" data-index="0" name="code"><code class="language-python hljs"><span class="hljs-built_in">print</span>(*objects, sep=<span class="hljs-string">' '</span>, end=<span class="hljs-string">'\n'</span>, file=sys.stdout)</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">参数的具体含义如下：</p> 
<p style="text-indent:50px;">objects --表示输出的对象。输出多个对象时，需要用 , （逗号）分隔。</p> 
<p style="text-indent:50px;">sep -- 用来间隔多个对象。</p> 
<p style="text-indent:50px;">end -- 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符。</p> 
<p style="text-indent:50px;">file -- 要写入的文件对象。</p> 
<pre class="has" data-index="1" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment">#数值类型可以直接输出</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">运行结果如下</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello World"</span>)  <span class="hljs-comment">#字符串类型可以直接输出</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">运行结果如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">Hello World</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">a=<span class="hljs-number">1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">b=<span class="hljs-string">"Hello World"</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(a, b)  <span class="hljs-comment">#可以一次输出多个对象，对象之间用逗号分隔</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">运行结果如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">1 Hello World</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#如果直接输出字符串，而不是用对象表示的话，可以不使用逗号</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"Duan"</span><span class="hljs-string">"Yixuan"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"Duan"</span>,<span class="hljs-string">"Yixuan"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">运行结果如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">DuanYixuan</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">Duan Yixuan</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">可知，不添加逗号分隔符，字符串之间没有间隔</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"www"</span>, <span class="hljs-string">"snh48"</span>, <span class="hljs-string">"com"</span>, sep=<span class="hljs-string">"."</span>)  <span class="hljs-comment"># 设置间隔符</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">运行结果如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">www.snh48.com</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<h1 id="%E4%BA%8C%E3%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E8%BE%93%E5%87%BA"><a name="t1"></a>二、变量的输出</h1> 
<p style="text-indent:50px;">无论什么类型的数据，包括但不局限于：数值型，布尔型，列表变量，字典变量...都可以直接输出。</p> 
<pre class="has" data-index="2" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#例如：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">num = <span class="hljs-number">19</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(num)    <span class="hljs-comment">#19  输出数值型变量</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">str</span> = <span class="hljs-string">'Duan Yixuan'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)  <span class="hljs-comment">#Duan Yixuan  输出字符串变量</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">'a'</span>]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)   <span class="hljs-comment">#[1, 2, 'a']  输出列表变量</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">tuple</span> = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">'a'</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>)    <span class="hljs-comment">#(1, 2, 'a') 输出元组变量</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">2</span>&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>)   <span class="hljs-comment"># &#123;'a': 1, 'b': 2&#125; 输出字典变量</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<h1 id="%E4%B8%89%E3%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA"><a name="t2"></a>三、数据的<a href="https://so.csdn.net/so/search?q=%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;格式化输出\&quot;}&quot;}" data-tit="格式化输出" data-pretit="格式化输出">格式化输出</a></h1> 
<p style="text-indent:50px;">在C语言中，我们可以使用printf("%-.4f",a)之类的形式，实现数据的的格式化输出。</p> 
<p style="text-indent:50px;">在python中，我们同样可以实现数据的格式化输出。我们可以先看一个简单的例子：</p> 
<pre class="has" data-index="3" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">s=<span class="hljs-string">'Duan Yixuan'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">x=<span class="hljs-built_in">len</span>(s)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">'The length of %s is %d'</span> %(s,x))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'The length of %s is %d' 这部分叫做：格式控制符</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">(s,x) 这部分叫做：转换说明符</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">% 字符，表示标记转换说明符的开始</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">输出如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">The length of Duan Yixuan is 11</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">和C语言的区别在于，Python中<span style="color:#00b0f0;">格式控制符</span>和<span style="color:#00b0f0;">转换说明符</span>用%分隔，C语言中用逗号。</p> 
<p style="text-indent:50px;">接下来我们仔细探讨一下格式化输出</p> 
<h2 id="3.1%20%25%E5%AD%97%E7%AC%A6"><a name="t3"></a>3.1 %字符</h2> 
<p style="text-indent:50px;">(1).%字符：标记转换说明符的开始。</p> 
<p style="text-indent:50px;">%字符的用法可参考上例，不再赘述。</p> 
<h2 id="3.2%C2%A0%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AE%B5%E5%AE%BD%E5%BA%A6%E5%92%8C%E7%B2%BE%E5%BA%A6"><a name="t4"></a>3.2&nbsp;最小字段宽度和<a href="https://so.csdn.net/so/search?q=%E7%B2%BE%E5%BA%A6&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E7%B2%BE%E5%BA%A6&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;精度\&quot;}&quot;}" data-tit="精度" data-pretit="精度">精度</a></h2> 
<p style="text-indent:50px;">最小字段宽度：转换后的字符串至少应该具有该值指定的宽度。如果是*（星号），则宽度会从值元组中读出。</p> 
<p style="text-indent:50px;">点(.)后跟精度值：如果需要输出实数，精度值表示出现在小数点后的位数。如果需要输出字符串，那么该数字就表示最大字段宽度。如果是*，那么精度将从元组中读出。</p> 
<p style="text-indent:50px;">可参考C语言的实现方式。</p> 
<p style="text-indent:50px;"><strong>注：字段宽度中，小数点也占一位。</strong></p> 
<pre class="has" data-index="4" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">PI = <span class="hljs-number">3.141592653</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">'%10.3f'</span>%PI)  <span class="hljs-comment">#字段宽10，精度3</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#     3.142</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#精度为3，所以只显示142，指定宽度为10，所以在左边需要补充5个空格，以达到10位的宽度</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<pre class="has" data-index="5" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">PI=<span class="hljs-number">3.1415926</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"PI=%.*f"</span>%(<span class="hljs-number">3</span>,PI))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#用*从后面的元组中读取字段宽度或精度,可以读取出来精度是3位</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#PI=3.142 </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#没有指定宽度，所以不需要缩进</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"PI=%*.3f"</span>%(<span class="hljs-number">10</span>,PI))   <span class="hljs-comment">#精度为3，总长为10.</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"># PI=     3.142</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#* 所处的位置不同，读取的内容也不同</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<h2 id="3.3%C2%A0%E8%BD%AC%E6%8D%A2%E6%A0%87%E5%BF%97"><a name="t5"></a>3.3&nbsp;转换标志</h2> 
<p style="text-indent:50px;">转换标志：-表示左对齐；+表示在数值前要加上正负号；" "(空白字符)表示正数之前保留空格()；0表示转换值若位数不够则用0填充。</p> 
<p style="text-indent:50px;">具体的我们可以看一下例子：</p> 
<pre class="has" data-index="6" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">PI=<span class="hljs-number">3.1415926</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">'%-10.3f'</span> %PI)  <span class="hljs-comment">#左对齐，还是10个字符，但空格显示在右边。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#3.142</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<pre class="has" data-index="7" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">PI=<span class="hljs-number">3.1415926</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">'%+f'</span> % PI)  <span class="hljs-comment">#显示正负号  #+3.141593</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"># 类型f的默认精度为6位小数。</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<pre class="has" data-index="8" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">PI=<span class="hljs-number">3.1415926</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">'%010.3f'</span>%PI) <span class="hljs-comment">#字段宽度为10，精度为3，不足处用0填充空白</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#000003.142   0表示转换值若位数不够则用0填充</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<h2 id="%C2%A03.4%C2%A0%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6%E5%BD%92%E7%BA%B3"><a name="t6"></a>3.4&nbsp;格式字符归纳</h2> 
<p style="text-indent:50px;">格式字符&nbsp;&nbsp;&nbsp; 说明&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;格式字符&nbsp;&nbsp;&nbsp;&nbsp; 说明</p> 
<p style="text-indent:50px;">%s&nbsp; 字符串采用str()的显示&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%x 十六进制整数</p> 
<p style="text-indent:50px;">%r&nbsp; 字符串(repr())的显示&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %e 指数（基底写e）</p> 
<p style="text-indent:50px;">%c&nbsp; 单个字符&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %E&nbsp;&nbsp; 指数（基底写E）</p> 
<p style="text-indent:50px;">%b 二进制整数&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%f,%F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 浮点数</p> 
<p style="text-indent:50px;">%d 十进制整数&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%g&nbsp;&nbsp; 指数(e)或浮点数(根据显示长度)</p> 
<p style="text-indent:50px;">%i&nbsp; 十进制整数&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %G&nbsp; 指数(E)或浮点数(根据显示长度)</p> 
<p style="text-indent:50px;">%o 八进制整数&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%%&nbsp; 字符%</p> 
<h1 id="%E5%9B%9B%E3%80%81%E6%8D%A2%E8%A1%8C%E4%B8%8E%E9%98%B2%E6%AD%A2%E6%8D%A2%E8%A1%8C"><a name="t7"></a>四、换行与防止换行</h1> 
<p style="text-indent:50px;">在python中，输出函数总是默认换行，比如说：</p> 
<pre class="has" data-index="9" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">0</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">2</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">3</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">4</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">而显然，这种输出太占“空间”，我们可以进行如下改造：</p> 
<p style="text-indent:50px;">参考文本第一部分对end参数的描述：<em>end -- 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符。</em></p> 
<pre class="has" data-index="10" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">' '</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#0 1 2 3 4 </span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<pre class="has" data-index="11" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">','</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#0,1,2,3,4,</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">但如果，我们同时运行上面两段代码，结果会如下所示，可知：我们需要在两次输出间，实现换行。</p> 
<pre class="has" data-index="12" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">' '</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">','</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">#0 1 2 3 4 0,1,2,3,4,</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">我们比较以下几种方式</p> 
<p style="text-indent:50px;"><strong>方式一：</strong></p> 
<pre class="has" data-index="13" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">' '</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>(<span class="hljs-string">'\n'</span>)  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">','</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">0 1 2 3 4 </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">0,1,2,3,4,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">之所以出现上面这种情况，是因为print()本身就是默认换行的，再加上换行符，相当于换行两次。</p> 
<p style="text-indent:50px;"><strong>方式二：</strong></p> 
<pre class="has" data-index="14" name="code"><code class="language-python hljs"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">' '</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">print</span>()  <span class="hljs-comment">#本身自带换行，完美输出</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">','</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"><span class="hljs-string">'''</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">0 1 2 3 4 </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">0,1,2,3,4,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'''</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre> 
<p style="text-indent:50px;">本篇完。</p> 
<p style="text-indent:50px;">如果错误，欢迎指出。</p> 
<p style="text-indent:50px;">&nbsp;</p>
                </div><div><div></div></div>
        </div>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>学习stm32前必备的知识</title>
    <url>/2022/08/03/%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>假如在学习stm32前，你学过51单片机，当然最好是在工科的专业在学校里面系统学习一遍，<del>当然不排除有天才少年</del>，如果你真的是可以把单片机的储存器深刻的理解了，外加着中断系统，外部中断，定时器，串口通信的原理搞懂，我相信学习stm32的时候你一定会非常的轻松。</p>
<p>如果是没学过的51单片机的，我个人认为最好学完51单片机之后再入门stm32。有些人可能对自己的未来有着很高期望的，做事情总是容易很浮躁。从我的经历来说，如果你静不下心来，那么做什么事情都不会做好的。这也是学stm32的一个思想，不要贪多，一天学一个，量变产生质变，最迟大概一个月就可以学完。</p>
<h2 id="stm32的开发前的准备"><a href="#stm32的开发前的准备" class="headerlink" title="stm32的开发前的准备"></a>stm32的开发前的准备</h2><p>1.开发的资料</p>
<ul>
<li>STM32F1xx中文参考手册.pdf</li>
<li>STM32固件库使用手册(中文翻译版).pdf</li>
<li>普中STM32F1xx开发攻略v1.0.pdf</li>
</ul>
<p><strong>如果开发stm32入门之后，你会发现你的c语言功底根本不够，推荐浙大翁恺教授的c语言，你会真正理解 结构体、枚举、头文件、编译预处理…</strong></p>
<p>2.开发用的IDE</p>
<ul>
<li>KEIL 5 (虽然界面不好看，但是真的好用，永远不要知道什么是ccs、iar)</li>
<li>VScode （界面好看一些，一般作为keil 5 的辅助工具）</li>
</ul>
<p>3.开发常用的工具</p>
<p>具体学习到特定的章节时，会提到相应的工具。比如学习iic通信协议后学习使用oled屏幕，这时肯定会学习使用字库软件的，具体的软件下载会在《嵌入式软件的分享》的文章</p>
<p>4.stm32防烧板指南</p>
<p>在开发stm32之前，我感觉都需要好好看一下开发板的原理图，了解一下电源电路之后在进行操作。<del>家里面有矿的请忽略</del>。参考资料：<strong>stm32f103zet6的核心板</strong>的市场价为200元左右</p>
<ul>
<li>看是否有5v转3v3的电路，如果没有就千万不要接5v</li>
<li>一定要看芯片手册，看一看stm32的电源输入电源电压范围，还有输入电流的范围。（输入电流的范围经常容易被忽略，但千万不要忽略！！！）</li>
<li>一般stm32核心板或者开发板上，电源</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理的实验</title>
    <url>/2022/09/22/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%9A%84%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>相对于信号系统，通信原理这门课相当于处于他的延申的一门课，相当于电路原理之于信号与系统。由于上个学期自己最后学习的摆烂，所以感觉没有学好，也算是一个遗憾吧。</p>
<p>所以在开展通信原理方面的实验时，自己留心对于实验进行操作，结合之前学习的知识，感觉自己对于这门课的理解又有了一些。</p>
<p>后面更新的内容可能就是围绕着实验，相当于把之前学过的内容再复习一遍</p>
]]></content>
      <tags>
        <tag>通信原理</tag>
      </tags>
  </entry>
  <entry>
    <title>日志</title>
    <url>/2022/08/06/%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>记录偶感的想法，已经有纪念意义的照片</p>
<span id="more"></span>

<h2 id="2022-x2F-8-x2F-6"><a href="#2022-x2F-8-x2F-6" class="headerlink" title="2022&#x2F;8&#x2F;6"></a>2022&#x2F;8&#x2F;6</h2><hr>
<p>马上大学做竞赛的时间就结束了，心里面有种说不出来的感受，可能和自己之前想的一样，做竞赛是真的会让人上瘾吧，最后看了看二年的竞赛时光留下了什么，一个记录获奖记录的excel表，手机里面竞赛相关的相册…</p>
<p>1.参赛证<br><img src="https://pic.imgdb.cn/item/62ee02de8c61dc3b8ef81abd.jpg" alt="参赛证"><br>2.启程-去杭电测评<br><img src="https://pic.imgdb.cn/item/62ee02d38c61dc3b8ef7ef8e.jpg" alt="启程-去杭电测评"><br>3.回来后骑车到嘉兴转转<br><img src="https://pic.imgdb.cn/item/62ee02d28c61dc3b8ef7e7ea.jpg" alt="回来后骑车到嘉兴转转"><br>4.通宵中准备中<br><img src="https://pic.imgdb.cn/item/62ee02d08c61dc3b8ef7e0de.jpg" alt="通宵中准备中"><br>5.白嫖杭电的12块午饭<br><img src="https://pic.imgdb.cn/item/62ee02c78c61dc3b8ef7ba72.jpg" alt="白嫖杭电的12块午饭"><br>6.等待测评中<br><img src="https://pic.imgdb.cn/item/62ee02c78c61dc3b8ef7bb3b.jpg" alt="等待测评中"> </p>
<h2 id="2022-x2F-8-x2F-6-1"><a href="#2022-x2F-8-x2F-6-1" class="headerlink" title="2022&#x2F;8&#x2F;6"></a>2022&#x2F;8&#x2F;6</h2><p>今天可能是放松的最后一天了，虽然比较有趣的放松方式还是没有找到，还是整天看视频。</p>
<p>明天就开始线上学习了，怎么说呢？感觉自己有时就是挺矛盾的。但是自己已经没有犹豫的时间了，希望自己是未来可期吧。</p>
<p>突然又好想开学了，可以领到一块32核心板，以后唯一可能再去摸单片机可能只有课设的时候了。。。。</p>
<h2 id="2022-x2F-8-x2F-15"><a href="#2022-x2F-8-x2F-15" class="headerlink" title="2022&#x2F;8&#x2F;15"></a>2022&#x2F;8&#x2F;15</h2><p>感觉最近有些颓废，可能是因为没有目标，还是单纯的变懒。搞不清楚。</p>
<p>可能是自己暂时还是没有找到新的目标吧，毕竟自己现在心里面还是想着自己的那些想做的电子发明。</p>
<p>但是感觉必须要放手了，因为感觉自己一直是在吃过去的老本，无论是获得奖项还是荣誉之类的，自己很清楚成果的到来是有延后性的，有可能自己现在拿到的奖项是上个学期的成果。</p>
<p>现在马上要大三了，很多人都开始选择好了出路。自己心里面的选择可能会因为这次获得奖学金的等级又会变得没有自信了吧.</p>
<p>细数这个学期的竞赛方面的奖项，只能一笑了之了。可能自己还是因为不太听话吧,还是自己不够成熟呢？</p>
<p>之前一直为了激励自己而寻找榜样，或者把自己精力付诸于他人的身上，说到底还是自己不自信的表现吧!</p>
<p>仔细思考，自己在某些方面过于自信，比如不愿意听老师讲课，感觉自己都会了。还有很多的矛盾一直放着那里需要遇到的时候才能回答选择</p>
<p><strong>以上都是自己的碎碎念</strong><br>下次写日志时，希望自己的英语长短句翻译水平和线性代数水平有些许进步吧！！！<br>ps:说实话周围有提前做好打算的同学也挺好的，毕竟在那里都有竞争，但是自己已经逃避竞争太久了</p>
<h2 id="9月21日"><a href="#9月21日" class="headerlink" title="9月21日"></a>9月21日</h2><p>没想到隔了那么长的时间 差不多一个月吧</p>
<p>现在应该是开学后的第四周，感觉自己还是很幸运的，以前在实验室的经历现在来应付正常的课业简直绰绰有余</p>
<p>这个学期大概没有什么奖学金拿了，因为自己竞赛方面没有拿什么奖 555</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式上位机软件</title>
    <url>/2022/08/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在平时嵌入式开发调试中，我们往往需要一些辅助开发工具辅助调试，本篇文章就分享一些自己平时常用的小工具</p>
<span id="more"></span>
<h1 id="工具下载链接"><a href="#工具下载链接" class="headerlink" title="工具下载链接"></a>工具下载链接</h1><p><a href="https://pan.baidu.com/s/1_riPa7gWs4Im9PDH4AiRlQ">嵌入式上位机软件-提取码:nhxn</a></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="1-stc-isp-15xx-v6-85p-exe"><a href="#1-stc-isp-15xx-v6-85p-exe" class="headerlink" title="1.stc-isp-15xx-v6.85p.exe"></a>1.stc-isp-15xx-v6.85p.exe</h2><p>只要你用过stc公司的51单片机，就一定知道这个软件…</p>
<p>但是随着stc推出的新的主流芯片比如8G系列、32G系列，新的官网上位机主要适配这些芯片。如果你想要用最新的上位机去下载程序进STC89C51系列的单片机，会发现连识别都识别不到，这时就需要作者发的这款老的上位机了（毕竟课设还是大多数用的都是STC89C51系列）</p>
<h2 id="2-sscom5-13-1-exe"><a href="#2-sscom5-13-1-exe" class="headerlink" title="2.sscom5.13.1.exe"></a>2.sscom5.13.1.exe</h2><p>这个算是我刚入门时用的比较多的一个串口调试上位机吧，现在用的比较少了，它优势可能体现在一次发多个数据，像数据包发送调试可能比较方便</p>
<h2 id="3-XCOM-V1-4-exe"><a href="#3-XCOM-V1-4-exe" class="headerlink" title="3.XCOM V1.4.exe"></a>3.XCOM V1.4.exe</h2><p>这个调试手机通信模块绝对是神器，像wifi模块、蓝牙模块等的调试，使用这个上位机一般没有出过问题。只要记得发送AT命令是记得把发送回车的按钮勾上即可</p>
<h2 id="4-SerialPlot"><a href="#4-SerialPlot" class="headerlink" title="4.SerialPlot"></a>4.SerialPlot</h2><p>这个软件听起来就知道，<strong>示波器</strong>，用于串口数据数据可视化。不过它对于输入的数据格式要求比较高。尤其是程序中出现了mcu的一生之敌，浮点数该如何处理？目前我还没有找到解决方法，所以这个用的比较少</p>
<h2 id="5-fireTools"><a href="#5-fireTools" class="headerlink" title="5.fireTools"></a>5.fireTools</h2><p>这个和stc上位机一样，是一个综合性的工具。更厉害的是，它可以调节pid的参数，但是这个需要特定的协议，这个东西自己没有研究过，所以自己用的很少</p>
<hr>
<p>以下是一些物联网场景用的比较多的软件</p>
<hr>
<h2 id="6-网络调试助手-exe"><a href="#6-网络调试助手-exe" class="headerlink" title="6.网络调试助手.exe"></a>6.网络调试助手.exe</h2><p>支持TCP&#x2F;IP协议和UDP协议</p>
<h2 id="7-SocketTool-exe"><a href="#7-SocketTool-exe" class="headerlink" title="7.SocketTool.exe"></a>7.SocketTool.exe</h2><p>支持TCP&#x2F;IP协议和UDP协议</p>
]]></content>
      <tags>
        <tag>软件分享</tag>
      </tags>
  </entry>
</search>
